var data = {lines:[
{"lineNum":"    1","line":"# This shell scriplet is meant to be included by other shell scripts"},
{"lineNum":"    2","line":"# to set up some variables pointing at the normal git directories and"},
{"lineNum":"    3","line":"# a few helper shell functions."},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"# Having this variable in your environment would break scripts because"},
{"lineNum":"    6","line":"# you would cause \"cd\" to be taken to unexpected places.  If you"},
{"lineNum":"    7","line":"# like CDPATH, define it for your interactive shell sessions without"},
{"lineNum":"    8","line":"# exporting it."},
{"lineNum":"    9","line":"# But we protect ourselves from such a user mistake nevertheless."},
{"lineNum":"   10","line":"unset CDPATH","class":"lineCov","hits":"84","possible_hits":"0",},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"# Similarly for IFS, but some shells (e.g. FreeBSD 7.2) are buggy and"},
{"lineNum":"   13","line":"# do not equate an unset IFS with IFS with the default, so here is"},
{"lineNum":"   14","line":"# an explicit SP HT LF."},
{"lineNum":"   15","line":"IFS=\'","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   16","line":"\'","class":"lineCov","hits":"84","possible_hits":"0",},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"git_broken_path_fix () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   19","line":"\tcase \":$PATH:\" in","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   20","line":"\t*:$1:*) : ok ;;","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   21","line":"\t*)"},
{"lineNum":"   22","line":"\t\tPATH=$(","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   23","line":"\t\t\tSANE_TOOL_PATH=\"$1\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   24","line":"\t\t\tIFS=: path= sep=","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   25","line":"\t\t\tset x $PATH","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   26","line":"\t\t\tshift","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   27","line":"\t\t\tfor elem","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   28","line":"\t\t\tdo"},
{"lineNum":"   29","line":"\t\t\t\tcase \"$SANE_TOOL_PATH:$elem\" in","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   30","line":"\t\t\t\t(?*:/bin | ?*:/usr/bin)"},
{"lineNum":"   31","line":"\t\t\t\t\tpath=\"$path$sep$SANE_TOOL_PATH\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   32","line":"\t\t\t\t\tsep=:","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   33","line":"\t\t\t\t\tSANE_TOOL_PATH=","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   34","line":"\t\t\t\tesac"},
{"lineNum":"   35","line":"\t\t\t\tpath=\"$path$sep$elem\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   36","line":"\t\t\t\tsep=:","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   37","line":"\t\t\tdone"},
{"lineNum":"   38","line":"\t\t\techo \"$path\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   39","line":"\t\t)"},
{"lineNum":"   40","line":"\t\t;;"},
{"lineNum":"   41","line":"\tesac"},
{"lineNum":"   42","line":"}"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"die () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   46","line":"\tdie_with_status 1 \"$@\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   47","line":"}"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"die_with_status () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   50","line":"\tstatus=$1","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   51","line":"\tshift","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   52","line":"\tprintf >&2 \'%s\\n\' \"$*\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   53","line":"\texit \"$status\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   54","line":"}"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"GIT_QUIET=","class":"lineCov","hits":"84","possible_hits":"0",},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"say () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   59","line":"\tif test -z \"$GIT_QUIET\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   60","line":"\tthen"},
{"lineNum":"   61","line":"\t\tprintf \'%s\\n\' \"$*\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   62","line":"\tfi"},
{"lineNum":"   63","line":"}"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"if test -n \"$OPTIONS_SPEC\"; then","class":"lineCov","hits":"84","possible_hits":"0",},
{"lineNum":"   66","line":"\tusage() {"},
{"lineNum":"   67","line":"\t\t\"$0\" -h","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   68","line":"\t\texit 1","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   69","line":"\t}"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"\tparseopt_extra=","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   72","line":"\t[ -n \"$OPTIONS_KEEPDASHDASH\" ] &&","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   73","line":"\t\tparseopt_extra=\"--keep-dashdash\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   74","line":"\t[ -n \"$OPTIONS_STUCKLONG\" ] &&","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   75","line":"\t\tparseopt_extra=\"$parseopt_extra --stuck-long\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"\teval \"$(","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   78","line":"\t\techo \"$OPTIONS_SPEC\" |","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   79","line":"\t\t\tgit rev-parse --parseopt $parseopt_extra -- \"$@\" ||","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   80","line":"\t\techo exit $?","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   81","line":"\t)\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   82","line":"else"},
{"lineNum":"   83","line":"\tdashless=$(basename -- \"$0\" | sed -e \'s/-/ /\')","class":"lineCov","hits":"252","possible_hits":"0",},
{"lineNum":"   84","line":"\tusage() {"},
{"lineNum":"   85","line":"\t\tdie \"usage: $dashless $USAGE\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   86","line":"\t}"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"\tif [ -z \"$LONG_USAGE\" ]","class":"lineCov","hits":"84","possible_hits":"0",},
{"lineNum":"   89","line":"\tthen"},
{"lineNum":"   90","line":"\t\tLONG_USAGE=\"usage: $dashless $USAGE\"","class":"lineCov","hits":"84","possible_hits":"0",},
{"lineNum":"   91","line":"\telse"},
{"lineNum":"   92","line":"\t\tLONG_USAGE=\"usage: $dashless $USAGE"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"$LONG_USAGE\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   95","line":"\tfi"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"\tcase \"$1\" in","class":"lineCov","hits":"168","possible_hits":"0",},
{"lineNum":"   98","line":"\t\t-h)"},
{"lineNum":"   99","line":"\t\techo \"$LONG_USAGE\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  100","line":"\t\texit","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  101","line":"\tesac"},
{"lineNum":"  102","line":"fi"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"# Set the name of the end-user facing command in the reflog when the"},
{"lineNum":"  105","line":"# script may update refs.  When GIT_REFLOG_ACTION is already set, this"},
{"lineNum":"  106","line":"# will not overwrite it, so that a scripted Porcelain (e.g. \"git"},
{"lineNum":"  107","line":"# rebase\") can set it to its own name (e.g. \"rebase\") and then call"},
{"lineNum":"  108","line":"# another scripted Porcelain (e.g. \"git am\") and a call to this"},
{"lineNum":"  109","line":"# function in the latter will keep the name of the end-user facing"},
{"lineNum":"  110","line":"# program (e.g. \"rebase\") in GIT_REFLOG_ACTION, ensuring whatever it"},
{"lineNum":"  111","line":"# does will be record as actions done as part of the end-user facing"},
{"lineNum":"  112","line":"# operation (e.g. \"rebase\")."},
{"lineNum":"  113","line":"#"},
{"lineNum":"  114","line":"# NOTE NOTE NOTE: consequently, after assigning a specific message to"},
{"lineNum":"  115","line":"# GIT_REFLOG_ACTION when calling a \"git\" command to record a custom"},
{"lineNum":"  116","line":"# reflog message, do not leave that custom value in GIT_REFLOG_ACTION,"},
{"lineNum":"  117","line":"# after you are done.  Other callers of \"git\" commands that rely on"},
{"lineNum":"  118","line":"# writing the default \"program name\" in reflog expect the variable to"},
{"lineNum":"  119","line":"# contain the value set by this function."},
{"lineNum":"  120","line":"#"},
{"lineNum":"  121","line":"# To use a custom reflog message, do either one of these three:"},
{"lineNum":"  122","line":"#"},
{"lineNum":"  123","line":"# (a) use a single-shot export form:"},
{"lineNum":"  124","line":"#     GIT_REFLOG_ACTION=\"$GIT_REFLOG_ACTION: preparing frotz\" \\"},
{"lineNum":"  125","line":"#         git command-that-updates-a-ref"},
{"lineNum":"  126","line":"#"},
{"lineNum":"  127","line":"# (b) save the original away and restore:"},
{"lineNum":"  128","line":"#     SAVED_ACTION=$GIT_REFLOG_ACTION"},
{"lineNum":"  129","line":"#     GIT_REFLOG_ACTION=\"$GIT_REFLOG_ACTION: preparing frotz\""},
{"lineNum":"  130","line":"#     git command-that-updates-a-ref"},
{"lineNum":"  131","line":"#     GIT_REFLOG_ACITON=$SAVED_ACTION"},
{"lineNum":"  132","line":"#"},
{"lineNum":"  133","line":"# (c) assign the variable in a subshell:"},
{"lineNum":"  134","line":"#     ("},
{"lineNum":"  135","line":"#         GIT_REFLOG_ACTION=\"$GIT_REFLOG_ACTION: preparing frotz\""},
{"lineNum":"  136","line":"#         git command-that-updates-a-ref"},
{"lineNum":"  137","line":"#     )"},
{"lineNum":"  138","line":"set_reflog_action() {"},
{"lineNum":"  139","line":"\tif [ -z \"${GIT_REFLOG_ACTION:+set}\" ]","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  140","line":"\tthen"},
{"lineNum":"  141","line":"\t\tGIT_REFLOG_ACTION=\"$*\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  142","line":"\t\texport GIT_REFLOG_ACTION","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  143","line":"\tfi"},
{"lineNum":"  144","line":"}"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"git_editor() {"},
{"lineNum":"  147","line":"\tif test -z \"${GIT_EDITOR:+set}\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  148","line":"\tthen"},
{"lineNum":"  149","line":"\t\tGIT_EDITOR=\"$(git var GIT_EDITOR)\" || return $?","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  150","line":"\tfi"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"\teval \"$GIT_EDITOR\" \'\"$@\"\'","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  153","line":"}"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"git_pager() {"},
{"lineNum":"  156","line":"\tif test -t 1","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  157","line":"\tthen"},
{"lineNum":"  158","line":"\t\tGIT_PAGER=$(git var GIT_PAGER)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  159","line":"\telse"},
{"lineNum":"  160","line":"\t\tGIT_PAGER=cat","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  161","line":"\tfi"},
{"lineNum":"  162","line":"\t: ${LESS=-FRX}","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  163","line":"\t: ${LV=-c}","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  164","line":"\texport LESS LV","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"\teval \"$GIT_PAGER\" \'\"$@\"\'","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  167","line":"}"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"sane_grep () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  170","line":"\tGREP_OPTIONS= LC_ALL=C grep \"$@\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  171","line":"}"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"sane_egrep () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  174","line":"\tGREP_OPTIONS= LC_ALL=C egrep \"$@\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  175","line":"}"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"is_bare_repository () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  178","line":"\tgit rev-parse --is-bare-repository","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  179","line":"}"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"cd_to_toplevel () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  182","line":"\tcdup=$(git rev-parse --show-toplevel) &&","class":"lineCov","hits":"56","possible_hits":"0",},
{"lineNum":"  183","line":"\tcd \"$cdup\" || {","class":"lineCov","hits":"28","possible_hits":"0",},
{"lineNum":"  184","line":"\t\techo >&2 \"Cannot chdir to $cdup, the toplevel of the working tree\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  185","line":"\t\texit 1","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  186","line":"\t}"},
{"lineNum":"  187","line":"}"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"require_work_tree_exists () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  190","line":"\tif test \"z$(git rev-parse --is-bare-repository)\" != zfalse","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  191","line":"\tthen"},
{"lineNum":"  192","line":"\t\tdie \"fatal: $0 cannot be used without a working tree.\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  193","line":"\tfi"},
{"lineNum":"  194","line":"}"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"require_work_tree () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  197","line":"\ttest \"$(git rev-parse --is-inside-work-tree 2>/dev/null)\" = true ||","class":"lineCov","hits":"168","possible_hits":"0",},
{"lineNum":"  198","line":"\tdie \"fatal: $0 cannot be used without a working tree.\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  199","line":"}"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"require_clean_work_tree () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  202","line":"\tgit rev-parse --verify HEAD >/dev/null || exit 1","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  203","line":"\tgit update-index -q --ignore-submodules --refresh","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  204","line":"\terr=0","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"\tif ! git diff-files --quiet --ignore-submodules","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  207","line":"\tthen"},
{"lineNum":"  208","line":"\t\techo >&2 \"Cannot $1: You have unstaged changes.\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  209","line":"\t\terr=1","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  210","line":"\tfi"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"\tif ! git diff-index --cached --quiet --ignore-submodules HEAD --","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  213","line":"\tthen"},
{"lineNum":"  214","line":"\t\tif [ $err = 0 ]","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  215","line":"\t\tthen"},
{"lineNum":"  216","line":"\t\t    echo >&2 \"Cannot $1: Your index contains uncommitted changes.\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  217","line":"\t\telse"},
{"lineNum":"  218","line":"\t\t    echo >&2 \"Additionally, your index contains uncommitted changes.\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  219","line":"\t\tfi"},
{"lineNum":"  220","line":"\t\terr=1","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  221","line":"\tfi"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"\tif [ $err = 1 ]","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  224","line":"\tthen"},
{"lineNum":"  225","line":"\t\ttest -n \"$2\" && echo >&2 \"$2\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  226","line":"\t\texit 1","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  227","line":"\tfi"},
{"lineNum":"  228","line":"}"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"# Generate a sed script to parse identities from a commit."},
{"lineNum":"  231","line":"#"},
{"lineNum":"  232","line":"# Reads the commit from stdin, which should be in raw format (e.g., from"},
{"lineNum":"  233","line":"# cat-file or \"--pretty=raw\")."},
{"lineNum":"  234","line":"#"},
{"lineNum":"  235","line":"# The first argument specifies the ident line to parse (e.g., \"author\"), and"},
{"lineNum":"  236","line":"# the second specifies the environment variable to put it in (e.g., \"AUTHOR\""},
{"lineNum":"  237","line":"# for \"GIT_AUTHOR_*\"). Multiple pairs can be given to parse author and"},
{"lineNum":"  238","line":"# committer."},
{"lineNum":"  239","line":"pick_ident_script () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  240","line":"\twhile test $# -gt 0","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  241","line":"\tdo"},
{"lineNum":"  242","line":"\t\tlid=$1; shift","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  243","line":"\t\tuid=$1; shift","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  244","line":"\t\tprintf \'%s\' \"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  245","line":"\t\t/^$lid /{","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  246","line":"\t\t\ts/\'/\'\\\\\\\\\'\'/g","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  247","line":"\t\t\th","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  248","line":"\t\t\ts/^$lid \"\'\\([^<]*\\) <[^>]*> .*$/\\1/\'\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  249","line":"\t\t\ts/.*/GIT_${uid}_NAME=\'&\'/p","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"\t\t\tg","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  252","line":"\t\t\ts/^$lid \"\'[^<]* <\\([^>]*\\)> .*$/\\1/\'\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  253","line":"\t\t\ts/.*/GIT_${uid}_EMAIL=\'&\'/p","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"\t\t\tg","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  256","line":"\t\t\ts/^$lid \"\'[^<]* <[^>]*> \\(.*\\)$/@\\1/\'\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  257","line":"\t\t\ts/.*/GIT_${uid}_DATE=\'&\'/p","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  258","line":"\t\t}"},
{"lineNum":"  259","line":"\t\t\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  260","line":"\tdone"},
{"lineNum":"  261","line":"\techo \'/^$/q\'","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  262","line":"}"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"# Create a pick-script as above and feed it to sed. Stdout is suitable for"},
{"lineNum":"  265","line":"# feeding to eval."},
{"lineNum":"  266","line":"parse_ident_from_commit () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  267","line":"\tLANG=C LC_ALL=C sed -ne \"$(pick_ident_script \"$@\")\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  268","line":"}"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"# Parse the author from a commit given as an argument. Stdout is suitable for"},
{"lineNum":"  271","line":"# feeding to eval to set the usual GIT_* ident variables."},
{"lineNum":"  272","line":"get_author_ident_from_commit () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  273","line":"\tencoding=$(git config i18n.commitencoding || echo UTF-8)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  274","line":"\tgit show -s --pretty=raw --encoding=\"$encoding\" \"$1\" -- |","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  275","line":"\tparse_ident_from_commit author AUTHOR","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  276","line":"}"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"# Clear repo-local GIT_* environment variables. Useful when switching to"},
{"lineNum":"  279","line":"# another repository (e.g. when entering a submodule). See also the env"},
{"lineNum":"  280","line":"# list in git_connect()"},
{"lineNum":"  281","line":"clear_local_git_env() {"},
{"lineNum":"  282","line":"\tunset $(git rev-parse --local-env-vars)","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  283","line":"}"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"# Generate a virtual base file for a two-file merge. Uses git apply to"},
{"lineNum":"  286","line":"# remove lines from $1 that are not in $2, leaving only common lines."},
{"lineNum":"  287","line":"create_virtual_base() {"},
{"lineNum":"  288","line":"\tsz0=$(wc -c <\"$1\")","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  289","line":"\tdiff -u -La/\"$1\" -Lb/\"$1\" \"$1\" \"$2\" | git apply --no-add","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  290","line":"\tsz1=$(wc -c <\"$1\")","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"\t# If we do not have enough common material, it is not"},
{"lineNum":"  293","line":"\t# worth trying two-file merge using common subsections."},
{"lineNum":"  294","line":"\texpr $sz0 \\< $sz1 \\* 2 >/dev/null || : >\"$1\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  295","line":"}"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"# Platform specific tweaks to work around some commands"},
{"lineNum":"  299","line":"case $(uname -s) in","class":"lineCov","hits":"252","possible_hits":"0",},
{"lineNum":"  300","line":"*MINGW*)"},
{"lineNum":"  301","line":"\t# Windows has its own (incompatible) sort and find"},
{"lineNum":"  302","line":"\tsort () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  303","line":"\t\t/usr/bin/sort \"$@\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  304","line":"\t}"},
{"lineNum":"  305","line":"\tfind () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  306","line":"\t\t/usr/bin/find \"$@\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  307","line":"\t}"},
{"lineNum":"  308","line":"\t# git sees Windows-style pwd"},
{"lineNum":"  309","line":"\tpwd () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  310","line":"\t\tbuiltin pwd -W","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  311","line":"\t}"},
{"lineNum":"  312","line":"\tis_absolute_path () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  313","line":"\t\tcase \"$1\" in","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  314","line":"\t\t[/\\\\]* | [A-Za-z]:*)"},
{"lineNum":"  315","line":"\t\t\treturn 0 ;;","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  316","line":"\t\tesac"},
{"lineNum":"  317","line":"\t\treturn 1","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  318","line":"\t}"},
{"lineNum":"  319","line":"\t;;"},
{"lineNum":"  320","line":"*)"},
{"lineNum":"  321","line":"\tis_absolute_path () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  322","line":"\t\tcase \"$1\" in","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  323","line":"\t\t/*)"},
{"lineNum":"  324","line":"\t\t\treturn 0 ;;","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  325","line":"\t\tesac"},
{"lineNum":"  326","line":"\t\treturn 1","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  327","line":"\t}"},
{"lineNum":"  328","line":"esac"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"# Make sure we are in a valid repository of a vintage we understand,"},
{"lineNum":"  331","line":"# if we require to be in a git repository."},
{"lineNum":"  332","line":"git_dir_init () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  333","line":"\tGIT_DIR=$(git rev-parse --git-dir) || exit","class":"lineCov","hits":"168","possible_hits":"0",},
{"lineNum":"  334","line":"\tif [ -z \"$SUBDIRECTORY_OK\" ]","class":"lineCov","hits":"84","possible_hits":"0",},
{"lineNum":"  335","line":"\tthen"},
{"lineNum":"  336","line":"\t\ttest -z \"$(git rev-parse --show-cdup)\" || {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  337","line":"\t\t\texit=$?","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  338","line":"\t\t\techo >&2 \"You need to run this command from the toplevel of the working tree.\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  339","line":"\t\t\texit $exit","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  340","line":"\t\t}"},
{"lineNum":"  341","line":"\tfi"},
{"lineNum":"  342","line":"\ttest -n \"$GIT_DIR\" && GIT_DIR=$(cd \"$GIT_DIR\" && pwd) || {","class":"lineCov","hits":"336","possible_hits":"0",},
{"lineNum":"  343","line":"\t\techo >&2 \"Unable to determine absolute path of git directory\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  344","line":"\t\texit 1","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  345","line":"\t}"},
{"lineNum":"  346","line":"\t: ${GIT_OBJECT_DIRECTORY=\"$GIT_DIR/objects\"}","class":"lineCov","hits":"84","possible_hits":"0",},
{"lineNum":"  347","line":"}"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"if test -z \"$NONGIT_OK\"","class":"lineCov","hits":"84","possible_hits":"0",},
{"lineNum":"  350","line":"then"},
{"lineNum":"  351","line":"\tgit_dir_init","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  352","line":"fi"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"peel_committish () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  355","line":"\tcase \"$1\" in","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  356","line":"\t:/*)"},
{"lineNum":"  357","line":"\t\tpeeltmp=$(git rev-parse --verify \"$1\") &&","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  358","line":"\t\tgit rev-parse --verify \"${peeltmp}^0\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  359","line":"\t\t;;"},
{"lineNum":"  360","line":"\t*)"},
{"lineNum":"  361","line":"\t\tgit rev-parse --verify \"${1}^0\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"  362","line":"\t\t;;"},
{"lineNum":"  363","line":"\tesac"},
{"lineNum":"  364","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "git-mergetool", "date" : "2015-05-01 11:32:33", "instrumented" : 158, "covered" : 17,};
var merged_data = [];
