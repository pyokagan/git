var data = {lines:[
{"lineNum":"    1","line":"#! /bin/sh"},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# Copyright (C) 2003, 2005-2007, 2011 Free Software Foundation, Inc."},
{"lineNum":"    4","line":"#"},
{"lineNum":"    5","line":"# This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"# it under the terms of the GNU Lesser General Public License as published by"},
{"lineNum":"    7","line":"# the Free Software Foundation; either version 2.1 of the License, or"},
{"lineNum":"    8","line":"# (at your option) any later version."},
{"lineNum":"    9","line":"#"},
{"lineNum":"   10","line":"# This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"# but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   13","line":"# GNU Lesser General Public License for more details."},
{"lineNum":"   14","line":"#"},
{"lineNum":"   15","line":"# You should have received a copy of the GNU Lesser General Public License"},
{"lineNum":"   16","line":"# along with this program.  If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":"#"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"# Find a way to echo strings without interpreting backslash."},
{"lineNum":"   20","line":"if test \"X`(echo \'\\t\') 2>/dev/null`\" = \'X\\t\'; then","class":"lineCov","hits":"110","possible_hits":"0",},
{"lineNum":"   21","line":"  echo=\'echo\'","class":"lineCov","hits":"55","possible_hits":"0",},
{"lineNum":"   22","line":"else"},
{"lineNum":"   23","line":"  if test \"X`(printf \'%s\\n\' \'\\t\') 2>/dev/null`\" = \'X\\t\'; then","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   24","line":"    echo=\'printf %s\\n\'","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   25","line":"  else"},
{"lineNum":"   26","line":"    echo_func () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   27","line":"      cat <<EOT","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   28","line":"$*"},
{"lineNum":"   29","line":"EOT"},
{"lineNum":"   30","line":"    }"},
{"lineNum":"   31","line":"    echo=\'echo_func\'","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   32","line":"  fi"},
{"lineNum":"   33","line":"fi"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"# This script is primarily a shell function library. In order for"},
{"lineNum":"   36","line":"# \". gettext.sh\" to find it, we install it in $PREFIX/bin (that is usually"},
{"lineNum":"   37","line":"# contained in $PATH), rather than in some other location such as"},
{"lineNum":"   38","line":"# $PREFIX/share/sh-scripts or $PREFIX/share/gettext. In order to not violate"},
{"lineNum":"   39","line":"# the Filesystem Hierarchy Standard when doing so, this script is executable."},
{"lineNum":"   40","line":"# Therefore it needs to support the standard --help and --version."},
{"lineNum":"   41","line":"if test -z \"${ZSH_VERSION+set}\"; then","class":"lineCov","hits":"55","possible_hits":"0",},
{"lineNum":"   42","line":"  # zsh is not POSIX compliant: By default, while \". gettext.sh\" is executed,"},
{"lineNum":"   43","line":"  # it sets $0 to \"gettext.sh\", defeating the purpose of this test. But"},
{"lineNum":"   44","line":"  # fortunately we know that when running under zsh, this script is always"},
{"lineNum":"   45","line":"  # being sourced, not executed, because hardly anyone is crazy enough to"},
{"lineNum":"   46","line":"  # install zsh as /bin/sh."},
{"lineNum":"   47","line":"  case \"$0\" in","class":"lineCov","hits":"55","possible_hits":"0",},
{"lineNum":"   48","line":"    gettext.sh | */gettext.sh | *\\\\gettext.sh)"},
{"lineNum":"   49","line":"      progname=$0","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   50","line":"      package=gettext-runtime","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   51","line":"      version=0.19.4","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   52","line":"      # func_usage"},
{"lineNum":"   53","line":"      # outputs to stdout the --help usage message."},
{"lineNum":"   54","line":"      func_usage ()","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   55","line":"      {"},
{"lineNum":"   56","line":"        echo \"GNU gettext shell script function library version $version\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   57","line":"        echo \"Usage: . gettext.sh\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   58","line":"      }"},
{"lineNum":"   59","line":"      # func_version"},
{"lineNum":"   60","line":"      # outputs to stdout the --version message."},
{"lineNum":"   61","line":"      func_version ()","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   62","line":"      {"},
{"lineNum":"   63","line":"        echo \"$progname (GNU $package) $version\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   64","line":"        echo \"Copyright (C) 2003-2007 Free Software Foundation, Inc.","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   65","line":"License GPLv2+: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html>","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   66","line":"This is free software: you are free to change and redistribute it.","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   67","line":"There is NO WARRANTY, to the extent permitted by law.\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   68","line":"        echo \"Written by\" \"Bruno Haible\"","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   69","line":"      }"},
{"lineNum":"   70","line":"      if test $# = 1; then","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   71","line":"        case \"$1\" in","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   72","line":"          --help | --hel | --he | --h )"},
{"lineNum":"   73","line":"            func_usage; exit 0 ;;","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   74","line":"          --version | --versio | --versi | --vers | --ver | --ve | --v )"},
{"lineNum":"   75","line":"            func_version; exit 0 ;;","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   76","line":"        esac"},
{"lineNum":"   77","line":"      fi"},
{"lineNum":"   78","line":"      func_usage 1>&2","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   79","line":"      exit 1","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   80","line":"      ;;"},
{"lineNum":"   81","line":"  esac"},
{"lineNum":"   82","line":"fi"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"# eval_gettext MSGID"},
{"lineNum":"   85","line":"# looks up the translation of MSGID and substitutes shell variables in the"},
{"lineNum":"   86","line":"# result."},
{"lineNum":"   87","line":"eval_gettext () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   88","line":"  gettext \"$1\" | (export PATH `envsubst --variables \"$1\"`; envsubst \"$1\")","class":"lineCov","hits":"40","possible_hits":"0",},
{"lineNum":"   89","line":"}"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"# eval_ngettext MSGID MSGID-PLURAL COUNT"},
{"lineNum":"   92","line":"# looks up the translation of MSGID / MSGID-PLURAL for COUNT and substitutes"},
{"lineNum":"   93","line":"# shell variables in the result."},
{"lineNum":"   94","line":"eval_ngettext () {","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   95","line":"  ngettext \"$1\" \"$2\" \"$3\" | (export PATH `envsubst --variables \"$1 $2\"`; envsubst \"$1 $2\")","class":"lineNoCov","hits":"0","possible_hits":"0",},
{"lineNum":"   96","line":"}"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"# Note: This use of envsubst is much safer than using the shell built-in \'eval\'"},
{"lineNum":"   99","line":"# would be."},
{"lineNum":"  100","line":"# 1) The security problem with Chinese translations that happen to use a"},
{"lineNum":"  101","line":"#    character such as \\xe0\\x60 is avoided."},
{"lineNum":"  102","line":"# 2) The security problem with malevolent translators who put in command lists"},
{"lineNum":"  103","line":"#    like \"$(...)\" or \"`...`\" is avoided."},
{"lineNum":"  104","line":"# 3) The translations can only refer to shell variables that are already"},
{"lineNum":"  105","line":"#    mentioned in MSGID or MSGID-PLURAL."},
{"lineNum":"  106","line":"#"},
{"lineNum":"  107","line":"# Note: \"export PATH\" above is a dummy; this is for the case when"},
{"lineNum":"  108","line":"# `envsubst --variables ...` returns nothing."},
{"lineNum":"  109","line":"#"},
{"lineNum":"  110","line":"# Note: In eval_ngettext above, \"$1 $2\" means a string whose variables set is"},
{"lineNum":"  111","line":"# the union of the variables set of \"$1\" and \"$2\"."},
{"lineNum":"  112","line":"#"},
{"lineNum":"  113","line":"# Note: The minimal use of backquote above ensures that trailing newlines are"},
{"lineNum":"  114","line":"# not dropped, not from the gettext invocation and not from the value of any"},
{"lineNum":"  115","line":"# shell variable."},
{"lineNum":"  116","line":"#"},
{"lineNum":"  117","line":"# Note: Field splitting on the `envsubst --variables ...` result is desired,"},
{"lineNum":"  118","line":"# since envsubst outputs the variables, separated by newlines. Pathname"},
{"lineNum":"  119","line":"# wildcard expansion or tilde expansion has no effect here, since the words"},
{"lineNum":"  120","line":"# output by \"envsubst --variables ...\" consist solely of alphanumeric"},
{"lineNum":"  121","line":"# characters and underscore."},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "git-stash", "date" : "2015-07-02 17:41:50", "instrumented" : 32, "covered" : 5,};
var merged_data = [];
