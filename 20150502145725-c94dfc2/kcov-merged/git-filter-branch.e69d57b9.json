var data = {lines:[
{"lineNum":"    1","line":"#!/bin/sh"},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# Rewrite revision history"},
{"lineNum":"    4","line":"# Copyright (c) Petr Baudis, 2006"},
{"lineNum":"    5","line":"# Minimal changes to \"port\" it to core-git (c) Johannes Schindelin, 2007"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"# Lets you rewrite the revision history of the current branch, creating"},
{"lineNum":"    8","line":"# a new branch. You can specify a number of filters to modify the commits,"},
{"lineNum":"    9","line":"# files and trees."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"# The following functions will also be available in the commit filter:"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"functions=$(cat << \\EOF"},
{"lineNum":"   14","line":"warn () {","class":"lineNoCov","hits":"0",},
{"lineNum":"   15","line":"\techo \"$*\" >&2","class":"lineNoCov","hits":"0",},
{"lineNum":"   16","line":"}"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"map()"},
{"lineNum":"   19","line":"{"},
{"lineNum":"   20","line":"\t# if it was not rewritten, take the original"},
{"lineNum":"   21","line":"\tif test -r \"$workdir/../map/$1\"","class":"lineNoCov","hits":"0",},
{"lineNum":"   22","line":"\tthen"},
{"lineNum":"   23","line":"\t\tcat \"$workdir/../map/$1\"","class":"lineNoCov","hits":"0",},
{"lineNum":"   24","line":"\telse"},
{"lineNum":"   25","line":"\t\techo \"$1\"","class":"lineNoCov","hits":"0",},
{"lineNum":"   26","line":"\tfi"},
{"lineNum":"   27","line":"}"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"# if you run \'skip_commit \"$@\"\' in a commit filter, it will print"},
{"lineNum":"   30","line":"# the (mapped) parents, effectively skipping the commit."},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"skip_commit()"},
{"lineNum":"   33","line":"{"},
{"lineNum":"   34","line":"\tshift;","class":"lineNoCov","hits":"0",},
{"lineNum":"   35","line":"\twhile [ -n \"$1\" ];","class":"lineNoCov","hits":"0",},
{"lineNum":"   36","line":"\tdo"},
{"lineNum":"   37","line":"\t\tshift;","class":"lineNoCov","hits":"0",},
{"lineNum":"   38","line":"\t\tmap \"$1\";","class":"lineNoCov","hits":"0",},
{"lineNum":"   39","line":"\t\tshift;","class":"lineNoCov","hits":"0",},
{"lineNum":"   40","line":"\tdone;","class":"lineNoCov","hits":"0",},
{"lineNum":"   41","line":"}"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"# if you run \'git_commit_non_empty_tree \"$@\"\' in a commit filter,"},
{"lineNum":"   44","line":"# it will skip commits that leave the tree untouched, commit the other."},
{"lineNum":"   45","line":"git_commit_non_empty_tree()"},
{"lineNum":"   46","line":"{"},
{"lineNum":"   47","line":"\tif test $# = 3 && test \"$1\" = $(git rev-parse \"$3^{tree}\"); then","class":"lineNoCov","hits":"0",},
{"lineNum":"   48","line":"\t\tmap \"$3\"","class":"lineNoCov","hits":"0",},
{"lineNum":"   49","line":"\telse"},
{"lineNum":"   50","line":"\t\tgit commit-tree \"$@\"","class":"lineNoCov","hits":"0",},
{"lineNum":"   51","line":"\tfi"},
{"lineNum":"   52","line":"}"},
{"lineNum":"   53","line":"# override die(): this version puts in an extra line break, so that"},
{"lineNum":"   54","line":"# the progress is still visible"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"die()"},
{"lineNum":"   57","line":"{"},
{"lineNum":"   58","line":"\techo >&2","class":"lineNoCov","hits":"0",},
{"lineNum":"   59","line":"\techo \"$*\" >&2","class":"lineNoCov","hits":"0",},
{"lineNum":"   60","line":"\texit 1","class":"lineNoCov","hits":"0",},
{"lineNum":"   61","line":"}"},
{"lineNum":"   62","line":"EOF","class":"lineNoCov","hits":"0",},
{"lineNum":"   63","line":")","class":"lineCov","hits":"1",},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"eval \"$functions\"","class":"lineCov","hits":"1",},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"finish_ident() {"},
{"lineNum":"   68","line":"\t# Ensure non-empty id name."},
{"lineNum":"   69","line":"\techo \"case \\\"\\$GIT_$1_NAME\\\" in \\\"\\\") GIT_$1_NAME=\\\"\\${GIT_$1_EMAIL%%@*}\\\" && export GIT_$1_NAME;; esac\"","class":"lineCov","hits":"1",},
{"lineNum":"   70","line":"\t# And make sure everything is exported."},
{"lineNum":"   71","line":"\techo \"export GIT_$1_NAME\"","class":"lineCov","hits":"1",},
{"lineNum":"   72","line":"\techo \"export GIT_$1_EMAIL\"","class":"lineCov","hits":"1",},
{"lineNum":"   73","line":"\techo \"export GIT_$1_DATE\"","class":"lineCov","hits":"1",},
{"lineNum":"   74","line":"}"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"set_ident () {","class":"lineCov","hits":"1",},
{"lineNum":"   77","line":"\tparse_ident_from_commit author AUTHOR committer COMMITTER","class":"lineCov","hits":"1",},
{"lineNum":"   78","line":"\tfinish_ident AUTHOR","class":"lineCov","hits":"1",},
{"lineNum":"   79","line":"\tfinish_ident COMMITTER","class":"lineCov","hits":"1",},
{"lineNum":"   80","line":"}"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"USAGE=\"[--env-filter <command>] [--tree-filter <command>]"},
{"lineNum":"   83","line":"\t[--index-filter <command>] [--parent-filter <command>]"},
{"lineNum":"   84","line":"\t[--msg-filter <command>] [--commit-filter <command>]"},
{"lineNum":"   85","line":"\t[--tag-name-filter <command>] [--subdirectory-filter <directory>]"},
{"lineNum":"   86","line":"\t[--original <namespace>] [-d <directory>] [-f | --force]"},
{"lineNum":"   87","line":"\t[<rev-list options>...]\"","class":"lineCov","hits":"1",},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"OPTIONS_SPEC=","class":"lineCov","hits":"1",},
{"lineNum":"   90","line":". git-sh-setup","class":"lineCov","hits":"1",},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"if [ \"$(is_bare_repository)\" = false ]; then","class":"lineCov","hits":"1",},
{"lineNum":"   93","line":"\trequire_clean_work_tree \'rewrite branches\'","class":"lineCov","hits":"1",},
{"lineNum":"   94","line":"fi"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"tempdir=.git-rewrite","class":"lineCov","hits":"1",},
{"lineNum":"   97","line":"filter_env=","class":"lineCov","hits":"1",},
{"lineNum":"   98","line":"filter_tree=","class":"lineCov","hits":"1",},
{"lineNum":"   99","line":"filter_index=","class":"lineCov","hits":"1",},
{"lineNum":"  100","line":"filter_parent=","class":"lineCov","hits":"1",},
{"lineNum":"  101","line":"filter_msg=cat","class":"lineCov","hits":"1",},
{"lineNum":"  102","line":"filter_commit=","class":"lineCov","hits":"1",},
{"lineNum":"  103","line":"filter_tag_name=","class":"lineCov","hits":"1",},
{"lineNum":"  104","line":"filter_subdir=","class":"lineCov","hits":"1",},
{"lineNum":"  105","line":"orig_namespace=refs/original/","class":"lineCov","hits":"1",},
{"lineNum":"  106","line":"force=","class":"lineCov","hits":"1",},
{"lineNum":"  107","line":"prune_empty=","class":"lineCov","hits":"1",},
{"lineNum":"  108","line":"remap_to_ancestor=","class":"lineCov","hits":"1",},
{"lineNum":"  109","line":"while :","class":"lineCov","hits":"1",},
{"lineNum":"  110","line":"do"},
{"lineNum":"  111","line":"\tcase \"$1\" in","class":"lineCov","hits":"1",},
{"lineNum":"  112","line":"\t--)"},
{"lineNum":"  113","line":"\t\tshift","class":"lineNoCov","hits":"0",},
{"lineNum":"  114","line":"\t\tbreak","class":"lineNoCov","hits":"0",},
{"lineNum":"  115","line":"\t\t;;"},
{"lineNum":"  116","line":"\t--force|-f)"},
{"lineNum":"  117","line":"\t\tshift","class":"lineCov","hits":"1",},
{"lineNum":"  118","line":"\t\tforce=t","class":"lineCov","hits":"1",},
{"lineNum":"  119","line":"\t\tcontinue","class":"lineCov","hits":"1",},
{"lineNum":"  120","line":"\t\t;;"},
{"lineNum":"  121","line":"\t--remap-to-ancestor)"},
{"lineNum":"  122","line":"\t\t# deprecated ($remap_to_ancestor is set now automatically)"},
{"lineNum":"  123","line":"\t\tshift","class":"lineNoCov","hits":"0",},
{"lineNum":"  124","line":"\t\tremap_to_ancestor=t","class":"lineNoCov","hits":"0",},
{"lineNum":"  125","line":"\t\tcontinue","class":"lineNoCov","hits":"0",},
{"lineNum":"  126","line":"\t\t;;"},
{"lineNum":"  127","line":"\t--prune-empty)"},
{"lineNum":"  128","line":"\t\tshift","class":"lineCov","hits":"1",},
{"lineNum":"  129","line":"\t\tprune_empty=t","class":"lineCov","hits":"1",},
{"lineNum":"  130","line":"\t\tcontinue","class":"lineCov","hits":"1",},
{"lineNum":"  131","line":"\t\t;;"},
{"lineNum":"  132","line":"\t-*)"},
{"lineNum":"  133","line":"\t\t;;"},
{"lineNum":"  134","line":"\t*)"},
{"lineNum":"  135","line":"\t\tbreak;","class":"lineCov","hits":"1",},
{"lineNum":"  136","line":"\tesac"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"\t# all switches take one argument"},
{"lineNum":"  139","line":"\tARG=\"$1\"","class":"lineCov","hits":"1",},
{"lineNum":"  140","line":"\tcase \"$#\" in 1) usage ;; esac","class":"lineCov","hits":"1",},
{"lineNum":"  141","line":"\tshift","class":"lineCov","hits":"1",},
{"lineNum":"  142","line":"\tOPTARG=\"$1\"","class":"lineCov","hits":"1",},
{"lineNum":"  143","line":"\tshift","class":"lineCov","hits":"1",},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"\tcase \"$ARG\" in","class":"lineCov","hits":"1",},
{"lineNum":"  146","line":"\t-d)"},
{"lineNum":"  147","line":"\t\ttempdir=\"$OPTARG\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  148","line":"\t\t;;"},
{"lineNum":"  149","line":"\t--env-filter)"},
{"lineNum":"  150","line":"\t\tfilter_env=\"$OPTARG\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  151","line":"\t\t;;"},
{"lineNum":"  152","line":"\t--tree-filter)"},
{"lineNum":"  153","line":"\t\tfilter_tree=\"$OPTARG\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  154","line":"\t\t;;"},
{"lineNum":"  155","line":"\t--index-filter)"},
{"lineNum":"  156","line":"\t\tfilter_index=\"$OPTARG\"","class":"lineCov","hits":"1",},
{"lineNum":"  157","line":"\t\t;;"},
{"lineNum":"  158","line":"\t--parent-filter)"},
{"lineNum":"  159","line":"\t\tfilter_parent=\"$OPTARG\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  160","line":"\t\t;;"},
{"lineNum":"  161","line":"\t--msg-filter)"},
{"lineNum":"  162","line":"\t\tfilter_msg=\"$OPTARG\"","class":"lineCov","hits":"1",},
{"lineNum":"  163","line":"\t\t;;"},
{"lineNum":"  164","line":"\t--commit-filter)"},
{"lineNum":"  165","line":"\t\tfilter_commit=\"$functions; $OPTARG\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  166","line":"\t\t;;"},
{"lineNum":"  167","line":"\t--tag-name-filter)"},
{"lineNum":"  168","line":"\t\tfilter_tag_name=\"$OPTARG\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  169","line":"\t\t;;"},
{"lineNum":"  170","line":"\t--subdirectory-filter)"},
{"lineNum":"  171","line":"\t\tfilter_subdir=\"$OPTARG\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  172","line":"\t\tremap_to_ancestor=t","class":"lineNoCov","hits":"0",},
{"lineNum":"  173","line":"\t\t;;"},
{"lineNum":"  174","line":"\t--original)"},
{"lineNum":"  175","line":"\t\torig_namespace=$(expr \"$OPTARG/\" : \'\\(.*[^/]\\)/*$\')/","class":"lineNoCov","hits":"0",},
{"lineNum":"  176","line":"\t\t;;"},
{"lineNum":"  177","line":"\t*)"},
{"lineNum":"  178","line":"\t\tusage","class":"lineNoCov","hits":"0",},
{"lineNum":"  179","line":"\t\t;;"},
{"lineNum":"  180","line":"\tesac"},
{"lineNum":"  181","line":"done"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"case \"$prune_empty,$filter_commit\" in","class":"lineCov","hits":"1",},
{"lineNum":"  184","line":",)"},
{"lineNum":"  185","line":"\tfilter_commit=\'git commit-tree \"$@\"\';;","class":"lineCov","hits":"1",},
{"lineNum":"  186","line":"t,)"},
{"lineNum":"  187","line":"\tfilter_commit=\"$functions;\"\' git_commit_non_empty_tree \"$@\"\';;","class":"lineCov","hits":"1",},
{"lineNum":"  188","line":",*)"},
{"lineNum":"  189","line":"\t;;"},
{"lineNum":"  190","line":"*)"},
{"lineNum":"  191","line":"\tdie \"Cannot set --prune-empty and --commit-filter at the same time\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  192","line":"esac"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"case \"$force\" in","class":"lineCov","hits":"1",},
{"lineNum":"  195","line":"t)"},
{"lineNum":"  196","line":"\trm -rf \"$tempdir\"","class":"lineCov","hits":"1",},
{"lineNum":"  197","line":";;"},
{"lineNum":"  198","line":"\'\')"},
{"lineNum":"  199","line":"\ttest -d \"$tempdir\" &&","class":"lineCov","hits":"1",},
{"lineNum":"  200","line":"\t\tdie \"$tempdir already exists, please remove it\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  201","line":"esac"},
{"lineNum":"  202","line":"orig_dir=$(pwd)","class":"lineCov","hits":"1",},
{"lineNum":"  203","line":"mkdir -p \"$tempdir/t\" &&","class":"lineCov","hits":"1",},
{"lineNum":"  204","line":"tempdir=\"$(cd \"$tempdir\"; pwd)\" &&","class":"lineCov","hits":"1",},
{"lineNum":"  205","line":"cd \"$tempdir/t\" &&","class":"lineCov","hits":"1",},
{"lineNum":"  206","line":"workdir=\"$(pwd)\" ||","class":"lineCov","hits":"1",},
{"lineNum":"  207","line":"die \"\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"# Remove tempdir on exit"},
{"lineNum":"  210","line":"trap \'cd \"$orig_dir\"; rm -rf \"$tempdir\"\' 0","class":"lineCov","hits":"1",},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"ORIG_GIT_DIR=\"$GIT_DIR\"","class":"lineCov","hits":"1",},
{"lineNum":"  213","line":"ORIG_GIT_WORK_TREE=\"$GIT_WORK_TREE\"","class":"lineCov","hits":"1",},
{"lineNum":"  214","line":"ORIG_GIT_INDEX_FILE=\"$GIT_INDEX_FILE\"","class":"lineCov","hits":"1",},
{"lineNum":"  215","line":"GIT_WORK_TREE=.","class":"lineCov","hits":"1",},
{"lineNum":"  216","line":"export GIT_DIR GIT_WORK_TREE","class":"lineCov","hits":"1",},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"# Make sure refs/original is empty"},
{"lineNum":"  219","line":"git for-each-ref > \"$tempdir\"/backup-refs || exit","class":"lineCov","hits":"1",},
{"lineNum":"  220","line":"while read sha1 type name","class":"lineCov","hits":"1",},
{"lineNum":"  221","line":"do"},
{"lineNum":"  222","line":"\tcase \"$force,$name\" in","class":"lineCov","hits":"1",},
{"lineNum":"  223","line":"\t,$orig_namespace*)"},
{"lineNum":"  224","line":"\t\tdie \"Cannot create a new backup.","class":"lineNoCov","hits":"0",},
{"lineNum":"  225","line":"A previous backup already exists in $orig_namespace","class":"lineNoCov","hits":"0",},
{"lineNum":"  226","line":"Force overwriting the backup with -f\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  227","line":"\t;;"},
{"lineNum":"  228","line":"\tt,$orig_namespace*)"},
{"lineNum":"  229","line":"\t\tgit update-ref -d \"$name\" $sha1","class":"lineNoCov","hits":"0",},
{"lineNum":"  230","line":"\t;;"},
{"lineNum":"  231","line":"\tesac"},
{"lineNum":"  232","line":"done < \"$tempdir\"/backup-refs","class":"lineNoCov","hits":"0",},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"# The refs should be updated if their heads were rewritten"},
{"lineNum":"  235","line":"git rev-parse --no-flags --revs-only --symbolic-full-name \\","class":"lineCov","hits":"1",},
{"lineNum":"  236","line":"\t--default HEAD \"$@\" > \"$tempdir\"/raw-heads || exit"},
{"lineNum":"  237","line":"sed -e \'/^^/d\' \"$tempdir\"/raw-heads >\"$tempdir\"/heads","class":"lineCov","hits":"1",},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"test -s \"$tempdir\"/heads ||","class":"lineCov","hits":"1",},
{"lineNum":"  240","line":"\tdie \"Which ref do you want to rewrite?\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"GIT_INDEX_FILE=\"$(pwd)/../index\"","class":"lineCov","hits":"1",},
{"lineNum":"  243","line":"export GIT_INDEX_FILE","class":"lineCov","hits":"1",},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"# map old->new commit ids for rewriting parents"},
{"lineNum":"  246","line":"mkdir ../map || die \"Could not create map/ directory\"","class":"lineCov","hits":"1",},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"# we need \"--\" only if there are no path arguments in $@"},
{"lineNum":"  249","line":"nonrevs=$(git rev-parse --no-revs \"$@\") || exit","class":"lineCov","hits":"1",},
{"lineNum":"  250","line":"if test -z \"$nonrevs\"","class":"lineCov","hits":"1",},
{"lineNum":"  251","line":"then"},
{"lineNum":"  252","line":"\tdashdash=--","class":"lineCov","hits":"1",},
{"lineNum":"  253","line":"else"},
{"lineNum":"  254","line":"\tdashdash=","class":"lineNoCov","hits":"0",},
{"lineNum":"  255","line":"\tremap_to_ancestor=t","class":"lineNoCov","hits":"0",},
{"lineNum":"  256","line":"fi"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"git rev-parse --revs-only \"$@\" >../parse","class":"lineCov","hits":"1",},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"case \"$filter_subdir\" in","class":"lineCov","hits":"1",},
{"lineNum":"  261","line":"\"\")"},
{"lineNum":"  262","line":"\teval set -- \"$(git rev-parse --sq --no-revs \"$@\")\"","class":"lineCov","hits":"1",},
{"lineNum":"  263","line":"\t;;"},
{"lineNum":"  264","line":"*)"},
{"lineNum":"  265","line":"\teval set -- \"$(git rev-parse --sq --no-revs \"$@\" $dashdash \\","class":"lineNoCov","hits":"0",},
{"lineNum":"  266","line":"\t\t\"$filter_subdir\")\""},
{"lineNum":"  267","line":"\t;;"},
{"lineNum":"  268","line":"esac"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"git rev-list --reverse --topo-order --default HEAD \\","class":"lineCov","hits":"1",},
{"lineNum":"  271","line":"\t--parents --simplify-merges --stdin \"$@\" <../parse >../revs ||"},
{"lineNum":"  272","line":"\tdie \"Could not get the commits\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  273","line":"commits=$(wc -l <../revs | tr -d \" \")","class":"lineCov","hits":"1",},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"test $commits -eq 0 && die \"Found nothing to rewrite\"","class":"lineCov","hits":"1",},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"# Rewrite the commits"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"git_filter_branch__commit_count=0","class":"lineCov","hits":"1",},
{"lineNum":"  280","line":"while read commit parents; do","class":"lineCov","hits":"1",},
{"lineNum":"  281","line":"\tgit_filter_branch__commit_count=$(($git_filter_branch__commit_count+1))","class":"lineCov","hits":"1",},
{"lineNum":"  282","line":"\tprintf \"\\rRewrite $commit ($git_filter_branch__commit_count/$commits)\"","class":"lineCov","hits":"1",},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"\tcase \"$filter_subdir\" in","class":"lineCov","hits":"1",},
{"lineNum":"  285","line":"\t\"\")"},
{"lineNum":"  286","line":"\t\tGIT_ALLOW_NULL_SHA1=1 git read-tree -i -m $commit","class":"lineCov","hits":"1",},
{"lineNum":"  287","line":"\t\t;;"},
{"lineNum":"  288","line":"\t*)"},
{"lineNum":"  289","line":"\t\t# The commit may not have the subdirectory at all"},
{"lineNum":"  290","line":"\t\terr=$(GIT_ALLOW_NULL_SHA1=1 \\","class":"lineNoCov","hits":"0",},
{"lineNum":"  291","line":"\t\t      git read-tree -i -m $commit:\"$filter_subdir\" 2>&1) || {"},
{"lineNum":"  292","line":"\t\t\tif ! git rev-parse -q --verify $commit:\"$filter_subdir\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  293","line":"\t\t\tthen"},
{"lineNum":"  294","line":"\t\t\t\trm -f \"$GIT_INDEX_FILE\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  295","line":"\t\t\telse"},
{"lineNum":"  296","line":"\t\t\t\techo >&2 \"$err\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  297","line":"\t\t\t\tfalse","class":"lineNoCov","hits":"0",},
{"lineNum":"  298","line":"\t\t\tfi"},
{"lineNum":"  299","line":"\t\t}"},
{"lineNum":"  300","line":"\tesac || die \"Could not initialize the index\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"\tGIT_COMMIT=$commit","class":"lineCov","hits":"1",},
{"lineNum":"  303","line":"\texport GIT_COMMIT","class":"lineCov","hits":"1",},
{"lineNum":"  304","line":"\tgit cat-file commit \"$commit\" >../commit ||","class":"lineCov","hits":"1",},
{"lineNum":"  305","line":"\t\tdie \"Cannot read commit $commit\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"\teval \"$(set_ident <../commit)\" ||","class":"lineCov","hits":"1",},
{"lineNum":"  308","line":"\t\tdie \"setting author/committer failed for commit $commit\"","class":"lineCov","hits":"1",},
{"lineNum":"  309","line":"\teval \"$filter_env\" < /dev/null ||","class":"lineCov","hits":"1",},
{"lineNum":"  310","line":"\t\tdie \"env filter failed: $filter_env\"","class":"lineCov","hits":"1",},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"\tif [ \"$filter_tree\" ]; then","class":"lineCov","hits":"1",},
{"lineNum":"  313","line":"\t\tgit checkout-index -f -u -a ||","class":"lineCov","hits":"1",},
{"lineNum":"  314","line":"\t\t\tdie \"Could not checkout the index\"","class":"lineCov","hits":"1",},
{"lineNum":"  315","line":"\t\t# files that $commit removed are now still in the working tree;"},
{"lineNum":"  316","line":"\t\t# remove them, else they would be added again"},
{"lineNum":"  317","line":"\t\tgit clean -d -q -f -x","class":"lineCov","hits":"1",},
{"lineNum":"  318","line":"\t\teval \"$filter_tree\" < /dev/null ||","class":"lineCov","hits":"1",},
{"lineNum":"  319","line":"\t\t\tdie \"tree filter failed: $filter_tree\"","class":"lineCov","hits":"1",},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"\t\t(","class":"lineNoCov","hits":"0",},
{"lineNum":"  322","line":"\t\t\tgit diff-index -r --name-only --ignore-submodules $commit &&","class":"lineNoCov","hits":"0",},
{"lineNum":"  323","line":"\t\t\tgit ls-files --others","class":"lineNoCov","hits":"0",},
{"lineNum":"  324","line":"\t\t) > \"$tempdir\"/tree-state || exit","class":"lineNoCov","hits":"0",},
{"lineNum":"  325","line":"\t\tgit update-index --add --replace --remove --stdin \\","class":"lineNoCov","hits":"0",},
{"lineNum":"  326","line":"\t\t\t< \"$tempdir\"/tree-state || exit"},
{"lineNum":"  327","line":"\tfi"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"\teval \"$filter_index\" < /dev/null ||","class":"lineCov","hits":"1",},
{"lineNum":"  330","line":"\t\tdie \"index filter failed: $filter_index\"","class":"lineCov","hits":"1",},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"\tparentstr=","class":"lineCov","hits":"1",},
{"lineNum":"  333","line":"\tfor parent in $parents; do","class":"lineCov","hits":"1",},
{"lineNum":"  334","line":"\t\tfor reparent in $(map \"$parent\"); do","class":"lineCov","hits":"1",},
{"lineNum":"  335","line":"\t\t\tcase \"$parentstr \" in","class":"lineCov","hits":"1",},
{"lineNum":"  336","line":"\t\t\t*\" -p $reparent \"*)"},
{"lineNum":"  337","line":"\t\t\t\t;;"},
{"lineNum":"  338","line":"\t\t\t*)"},
{"lineNum":"  339","line":"\t\t\t\tparentstr=\"$parentstr -p $reparent\"","class":"lineCov","hits":"1",},
{"lineNum":"  340","line":"\t\t\t\t;;"},
{"lineNum":"  341","line":"\t\t\tesac"},
{"lineNum":"  342","line":"\t\tdone"},
{"lineNum":"  343","line":"\tdone"},
{"lineNum":"  344","line":"\tif [ \"$filter_parent\" ]; then","class":"lineCov","hits":"1",},
{"lineNum":"  345","line":"\t\tparentstr=\"$(echo \"$parentstr\" | eval \"$filter_parent\")\" ||","class":"lineNoCov","hits":"0",},
{"lineNum":"  346","line":"\t\t\t\tdie \"parent filter failed: $filter_parent\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  347","line":"\tfi"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"\tsed -e \'1,/^$/d\' <../commit | \\","class":"lineCov","hits":"1",},
{"lineNum":"  350","line":"\t\teval \"$filter_msg\" > ../message ||"},
{"lineNum":"  351","line":"\t\t\tdie \"msg filter failed: $filter_msg\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  352","line":"\tworkdir=$workdir /bin/sh -c \"$filter_commit\" \"git commit-tree\" \\","class":"lineCov","hits":"1",},
{"lineNum":"  353","line":"\t\t$(git write-tree) $parentstr < ../message > ../map/$commit ||"},
{"lineNum":"  354","line":"\t\t\tdie \"could not write rewritten commit\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  355","line":"done <../revs","class":"lineNoCov","hits":"0",},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"# If we are filtering for paths, as in the case of a subdirectory"},
{"lineNum":"  358","line":"# filter, it is possible that a specified head is not in the set of"},
{"lineNum":"  359","line":"# rewritten commits, because it was pruned by the revision walker."},
{"lineNum":"  360","line":"# Ancestor remapping fixes this by mapping these heads to the unique"},
{"lineNum":"  361","line":"# nearest ancestor that survived the pruning."},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"if test \"$remap_to_ancestor\" = t","class":"lineCov","hits":"1",},
{"lineNum":"  364","line":"then"},
{"lineNum":"  365","line":"\twhile read ref","class":"lineNoCov","hits":"0",},
{"lineNum":"  366","line":"\tdo"},
{"lineNum":"  367","line":"\t\tsha1=$(git rev-parse \"$ref\"^0)","class":"lineNoCov","hits":"0",},
{"lineNum":"  368","line":"\t\ttest -f \"$workdir\"/../map/$sha1 && continue","class":"lineNoCov","hits":"0",},
{"lineNum":"  369","line":"\t\tancestor=$(git rev-list --simplify-merges -1 \"$ref\" \"$@\")","class":"lineNoCov","hits":"0",},
{"lineNum":"  370","line":"\t\ttest \"$ancestor\" && echo $(map $ancestor) >> \"$workdir\"/../map/$sha1","class":"lineNoCov","hits":"0",},
{"lineNum":"  371","line":"\tdone < \"$tempdir\"/heads","class":"lineNoCov","hits":"0",},
{"lineNum":"  372","line":"fi"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"# Finally update the refs"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"_x40=\'[0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f]\'","class":"lineCov","hits":"1",},
{"lineNum":"  377","line":"_x40=\"$_x40$_x40$_x40$_x40$_x40$_x40$_x40$_x40\"","class":"lineCov","hits":"1",},
{"lineNum":"  378","line":"echo","class":"lineCov","hits":"1",},
{"lineNum":"  379","line":"while read ref","class":"lineCov","hits":"1",},
{"lineNum":"  380","line":"do"},
{"lineNum":"  381","line":"\t# avoid rewriting a ref twice"},
{"lineNum":"  382","line":"\ttest -f \"$orig_namespace$ref\" && continue","class":"lineCov","hits":"1",},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"\tsha1=$(git rev-parse \"$ref\"^0)","class":"lineCov","hits":"1",},
{"lineNum":"  385","line":"\trewritten=$(map $sha1)","class":"lineCov","hits":"1",},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"\ttest $sha1 = \"$rewritten\" &&","class":"lineCov","hits":"1",},
{"lineNum":"  388","line":"\t\twarn \"WARNING: Ref \'$ref\' is unchanged\" &&","class":"lineNoCov","hits":"0",},
{"lineNum":"  389","line":"\t\tcontinue","class":"lineNoCov","hits":"0",},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"\tcase \"$rewritten\" in","class":"lineCov","hits":"1",},
{"lineNum":"  392","line":"\t\'\')"},
{"lineNum":"  393","line":"\t\techo \"Ref \'$ref\' was deleted\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  394","line":"\t\tgit update-ref -m \"filter-branch: delete\" -d \"$ref\" $sha1 ||","class":"lineNoCov","hits":"0",},
{"lineNum":"  395","line":"\t\t\tdie \"Could not delete $ref\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  396","line":"\t;;"},
{"lineNum":"  397","line":"\t$_x40)"},
{"lineNum":"  398","line":"\t\techo \"Ref \'$ref\' was rewritten\"","class":"lineCov","hits":"1",},
{"lineNum":"  399","line":"\t\tif ! git update-ref -m \"filter-branch: rewrite\" \\","class":"lineCov","hits":"1",},
{"lineNum":"  400","line":"\t\t\t\t\t\"$ref\" $rewritten $sha1 2>/dev/null; then"},
{"lineNum":"  401","line":"\t\t\tif test $(git cat-file -t \"$ref\") = tag; then","class":"lineNoCov","hits":"0",},
{"lineNum":"  402","line":"\t\t\t\tif test -z \"$filter_tag_name\"; then","class":"lineNoCov","hits":"0",},
{"lineNum":"  403","line":"\t\t\t\t\twarn \"WARNING: You said to rewrite tagged commits, but not the corresponding tag.\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  404","line":"\t\t\t\t\twarn \"WARNING: Perhaps use \'--tag-name-filter cat\' to rewrite the tag.\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  405","line":"\t\t\t\tfi"},
{"lineNum":"  406","line":"\t\t\telse"},
{"lineNum":"  407","line":"\t\t\t\tdie \"Could not rewrite $ref\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  408","line":"\t\t\tfi"},
{"lineNum":"  409","line":"\t\tfi"},
{"lineNum":"  410","line":"\t;;"},
{"lineNum":"  411","line":"\t*)"},
{"lineNum":"  412","line":"\t\t# NEEDSWORK: possibly add -Werror, making this an error"},
{"lineNum":"  413","line":"\t\twarn \"WARNING: \'$ref\' was rewritten into multiple commits:\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  414","line":"\t\twarn \"$rewritten\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  415","line":"\t\twarn \"WARNING: Ref \'$ref\' points to the first one now.\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  416","line":"\t\trewritten=$(echo \"$rewritten\" | head -n 1)","class":"lineNoCov","hits":"0",},
{"lineNum":"  417","line":"\t\tgit update-ref -m \"filter-branch: rewrite to first\" \\","class":"lineNoCov","hits":"0",},
{"lineNum":"  418","line":"\t\t\t\t\"$ref\" $rewritten $sha1 ||"},
{"lineNum":"  419","line":"\t\t\tdie \"Could not rewrite $ref\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  420","line":"\t;;"},
{"lineNum":"  421","line":"\tesac"},
{"lineNum":"  422","line":"\tgit update-ref -m \"filter-branch: backup\" \"$orig_namespace$ref\" $sha1 ||","class":"lineCov","hits":"1",},
{"lineNum":"  423","line":"\t\t exit","class":"lineNoCov","hits":"0",},
{"lineNum":"  424","line":"done < \"$tempdir\"/heads","class":"lineNoCov","hits":"0",},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"# TODO: This should possibly go, with the semantics that all positive given"},
{"lineNum":"  427","line":"#       refs are updated, and their original heads stored in refs/original/"},
{"lineNum":"  428","line":"# Filter tags"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"if [ \"$filter_tag_name\" ]; then","class":"lineCov","hits":"1",},
{"lineNum":"  431","line":"\tgit for-each-ref --format=\'%(objectname) %(objecttype) %(refname)\' refs/tags |","class":"lineNoCov","hits":"0",},
{"lineNum":"  432","line":"\twhile read sha1 type ref; do","class":"lineNoCov","hits":"0",},
{"lineNum":"  433","line":"\t\tref=\"${ref#refs/tags/}\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  434","line":"\t\t# XXX: Rewrite tagged trees as well?"},
{"lineNum":"  435","line":"\t\tif [ \"$type\" != \"commit\" -a \"$type\" != \"tag\" ]; then","class":"lineNoCov","hits":"0",},
{"lineNum":"  436","line":"\t\t\tcontinue;","class":"lineNoCov","hits":"0",},
{"lineNum":"  437","line":"\t\tfi"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"\t\tif [ \"$type\" = \"tag\" ]; then","class":"lineNoCov","hits":"0",},
{"lineNum":"  440","line":"\t\t\t# Dereference to a commit"},
{"lineNum":"  441","line":"\t\t\tsha1t=\"$sha1\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  442","line":"\t\t\tsha1=\"$(git rev-parse -q \"$sha1\"^{commit})\" || continue","class":"lineNoCov","hits":"0",},
{"lineNum":"  443","line":"\t\tfi"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"\t\t[ -f \"../map/$sha1\" ] || continue","class":"lineNoCov","hits":"0",},
{"lineNum":"  446","line":"\t\tnew_sha1=\"$(cat \"../map/$sha1\")\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  447","line":"\t\tGIT_COMMIT=\"$sha1\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  448","line":"\t\texport GIT_COMMIT","class":"lineNoCov","hits":"0",},
{"lineNum":"  449","line":"\t\tnew_ref=\"$(echo \"$ref\" | eval \"$filter_tag_name\")\" ||","class":"lineNoCov","hits":"0",},
{"lineNum":"  450","line":"\t\t\tdie \"tag name filter failed: $filter_tag_name\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"\t\techo \"$ref -> $new_ref ($sha1 -> $new_sha1)\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"\t\tif [ \"$type\" = \"tag\" ]; then","class":"lineNoCov","hits":"0",},
{"lineNum":"  455","line":"\t\t\tnew_sha1=$( ( printf \'object %s\\ntype commit\\ntag %s\\n\' \\","class":"lineNoCov","hits":"0",},
{"lineNum":"  456","line":"\t\t\t\t\t\t\"$new_sha1\" \"$new_ref\""},
{"lineNum":"  457","line":"\t\t\t\tgit cat-file tag \"$ref\" |","class":"lineNoCov","hits":"0",},
{"lineNum":"  458","line":"\t\t\t\tsed -n \\","class":"lineNoCov","hits":"0",},
{"lineNum":"  459","line":"\t\t\t\t    -e \'1,/^$/{"},
{"lineNum":"  460","line":"\t\t\t\t\t  /^object /d","class":"lineNoCov","hits":"0",},
{"lineNum":"  461","line":"\t\t\t\t\t  /^type /d","class":"lineNoCov","hits":"0",},
{"lineNum":"  462","line":"\t\t\t\t\t  /^tag /d","class":"lineNoCov","hits":"0",},
{"lineNum":"  463","line":"\t\t\t\t\t}\' \\","class":"lineNoCov","hits":"0",},
{"lineNum":"  464","line":"\t\t\t\t    -e \'/^-----BEGIN PGP SIGNATURE-----/q\' \\"},
{"lineNum":"  465","line":"\t\t\t\t    -e \'p\' ) |"},
{"lineNum":"  466","line":"\t\t\t\tgit mktag) ||","class":"lineNoCov","hits":"0",},
{"lineNum":"  467","line":"\t\t\t\tdie \"Could not create new tag object for $ref\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  468","line":"\t\t\tif git cat-file tag \"$ref\" | \\","class":"lineNoCov","hits":"0",},
{"lineNum":"  469","line":"\t\t\t   sane_grep \'^-----BEGIN PGP SIGNATURE-----\' >/dev/null 2>&1"},
{"lineNum":"  470","line":"\t\t\tthen"},
{"lineNum":"  471","line":"\t\t\t\twarn \"gpg signature stripped from tag object $sha1t\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  472","line":"\t\t\tfi"},
{"lineNum":"  473","line":"\t\tfi"},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"\t\tgit update-ref \"refs/tags/$new_ref\" \"$new_sha1\" ||","class":"lineNoCov","hits":"0",},
{"lineNum":"  476","line":"\t\t\tdie \"Could not write tag $new_ref\"","class":"lineNoCov","hits":"0",},
{"lineNum":"  477","line":"\tdone"},
{"lineNum":"  478","line":"fi"},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"cd \"$orig_dir\"","class":"lineCov","hits":"1",},
{"lineNum":"  481","line":"rm -rf \"$tempdir\"","class":"lineCov","hits":"1",},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"trap - 0","class":"lineCov","hits":"1",},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"unset GIT_DIR GIT_WORK_TREE GIT_INDEX_FILE","class":"lineCov","hits":"1",},
{"lineNum":"  486","line":"test -z \"$ORIG_GIT_DIR\" || {","class":"lineCov","hits":"1",},
{"lineNum":"  487","line":"\tGIT_DIR=\"$ORIG_GIT_DIR\" && export GIT_DIR","class":"lineCov","hits":"1",},
{"lineNum":"  488","line":"}"},
{"lineNum":"  489","line":"test -z \"$ORIG_GIT_WORK_TREE\" || {","class":"lineCov","hits":"1",},
{"lineNum":"  490","line":"\tGIT_WORK_TREE=\"$ORIG_GIT_WORK_TREE\" &&","class":"lineNoCov","hits":"0",},
{"lineNum":"  491","line":"\texport GIT_WORK_TREE","class":"lineNoCov","hits":"0",},
{"lineNum":"  492","line":"}"},
{"lineNum":"  493","line":"test -z \"$ORIG_GIT_INDEX_FILE\" || {","class":"lineCov","hits":"1",},
{"lineNum":"  494","line":"\tGIT_INDEX_FILE=\"$ORIG_GIT_INDEX_FILE\" &&","class":"lineNoCov","hits":"0",},
{"lineNum":"  495","line":"\texport GIT_INDEX_FILE","class":"lineNoCov","hits":"0",},
{"lineNum":"  496","line":"}"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"if [ \"$(is_bare_repository)\" = false ]; then","class":"lineCov","hits":"1",},
{"lineNum":"  499","line":"\tgit read-tree -u -m HEAD || exit","class":"lineCov","hits":"1",},
{"lineNum":"  500","line":"fi"},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"exit 0","class":"lineCov","hits":"1",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "git-pull", "date" : "2015-05-02 15:01:37", "instrumented" : 254, "covered" : 134,};
var merged_data = [];
