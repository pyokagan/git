var data = {lines:[
{"lineNum":"    1","line":"# This shell script fragment is sourced by git-rebase to implement"},
{"lineNum":"    2","line":"# its interactive mode.  \"git rebase --interactive\" makes it easy"},
{"lineNum":"    3","line":"# to fix up commits in the middle of a series and rearrange commits."},
{"lineNum":"    4","line":"#"},
{"lineNum":"    5","line":"# Copyright (c) 2006 Johannes E. Schindelin"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"# The original idea comes from Eric W. Biederman, in"},
{"lineNum":"    8","line":"# http://article.gmane.org/gmane.comp.version-control.git/22407"},
{"lineNum":"    9","line":"#"},
{"lineNum":"   10","line":"# The file containing rebase commands, comments, and empty lines."},
{"lineNum":"   11","line":"# This file is created by \"git rebase -i\" then edited by the user.  As"},
{"lineNum":"   12","line":"# the lines are processed, they are removed from the front of this"},
{"lineNum":"   13","line":"# file and written to the tail of $done."},
{"lineNum":"   14","line":"todo=\"$state_dir\"/git-rebase-todo","class":"lineCov","hits":"1",},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"# The rebase command lines that have already been processed.  A line"},
{"lineNum":"   17","line":"# is moved here when it is first handled, before any associated user"},
{"lineNum":"   18","line":"# actions."},
{"lineNum":"   19","line":"done=\"$state_dir\"/done","class":"lineCov","hits":"1",},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"# The commit message that is planned to be used for any changes that"},
{"lineNum":"   22","line":"# need to be committed following a user interaction."},
{"lineNum":"   23","line":"msg=\"$state_dir\"/message","class":"lineCov","hits":"1",},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"# The file into which is accumulated the suggested commit message for"},
{"lineNum":"   26","line":"# squash/fixup commands.  When the first of a series of squash/fixups"},
{"lineNum":"   27","line":"# is seen, the file is created and the commit message from the"},
{"lineNum":"   28","line":"# previous commit and from the first squash/fixup commit are written"},
{"lineNum":"   29","line":"# to it.  The commit message for each subsequent squash/fixup commit"},
{"lineNum":"   30","line":"# is appended to the file as it is processed."},
{"lineNum":"   31","line":"#"},
{"lineNum":"   32","line":"# The first line of the file is of the form"},
{"lineNum":"   33","line":"#     # This is a combination of $count commits."},
{"lineNum":"   34","line":"# where $count is the number of commits whose messages have been"},
{"lineNum":"   35","line":"# written to the file so far (including the initial \"pick\" commit)."},
{"lineNum":"   36","line":"# Each time that a commit message is processed, this line is read and"},
{"lineNum":"   37","line":"# updated.  It is deleted just before the combined commit is made."},
{"lineNum":"   38","line":"squash_msg=\"$state_dir\"/message-squash","class":"lineCov","hits":"1",},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"# If the current series of squash/fixups has not yet included a squash"},
{"lineNum":"   41","line":"# command, then this file exists and holds the commit message of the"},
{"lineNum":"   42","line":"# original \"pick\" commit.  (If the series ends without a \"squash\""},
{"lineNum":"   43","line":"# command, then this can be used as the commit message of the combined"},
{"lineNum":"   44","line":"# commit without opening the editor.)"},
{"lineNum":"   45","line":"fixup_msg=\"$state_dir\"/message-fixup","class":"lineCov","hits":"1",},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"# $rewritten is the name of a directory containing files for each"},
{"lineNum":"   48","line":"# commit that is reachable by at least one merge base of $head and"},
{"lineNum":"   49","line":"# $upstream. They are not necessarily rewritten, but their children"},
{"lineNum":"   50","line":"# might be.  This ensures that commits on merged, but otherwise"},
{"lineNum":"   51","line":"# unrelated side branches are left alone. (Think \"X\" in the man page\'s"},
{"lineNum":"   52","line":"# example.)"},
{"lineNum":"   53","line":"rewritten=\"$state_dir\"/rewritten","class":"lineCov","hits":"1",},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"dropped=\"$state_dir\"/dropped","class":"lineCov","hits":"1",},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"end=\"$state_dir\"/end","class":"lineCov","hits":"1",},
{"lineNum":"   58","line":"msgnum=\"$state_dir\"/msgnum","class":"lineCov","hits":"1",},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"# A script to set the GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL, and"},
{"lineNum":"   61","line":"# GIT_AUTHOR_DATE that will be used for the commit that is currently"},
{"lineNum":"   62","line":"# being rebased."},
{"lineNum":"   63","line":"author_script=\"$state_dir\"/author-script","class":"lineCov","hits":"1",},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"# When an \"edit\" rebase command is being processed, the SHA1 of the"},
{"lineNum":"   66","line":"# commit to be edited is recorded in this file.  When \"git rebase"},
{"lineNum":"   67","line":"# --continue\" is executed, if there are any staged changes then they"},
{"lineNum":"   68","line":"# will be amended to the HEAD commit, but only provided the HEAD"},
{"lineNum":"   69","line":"# commit is still the commit to be edited.  When any other rebase"},
{"lineNum":"   70","line":"# command is processed, this file is deleted."},
{"lineNum":"   71","line":"amend=\"$state_dir\"/amend","class":"lineCov","hits":"1",},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"# For the post-rewrite hook, we make a list of rewritten commits and"},
{"lineNum":"   74","line":"# their new sha1s.  The rewritten-pending list keeps the sha1s of"},
{"lineNum":"   75","line":"# commits that have been processed, but not committed yet,"},
{"lineNum":"   76","line":"# e.g. because they are waiting for a \'squash\' command."},
{"lineNum":"   77","line":"rewritten_list=\"$state_dir\"/rewritten-list","class":"lineCov","hits":"1",},
{"lineNum":"   78","line":"rewritten_pending=\"$state_dir\"/rewritten-pending","class":"lineCov","hits":"1",},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"strategy_args=","class":"lineCov","hits":"1",},
{"lineNum":"   81","line":"if test -n \"$do_merge\"","class":"lineCov","hits":"1",},
{"lineNum":"   82","line":"then"},
{"lineNum":"   83","line":"\tstrategy_args=${strategy:+--strategy=$strategy}","class":"lineNoCov","hits":"0",},
{"lineNum":"   84","line":"\teval \'","class":"lineNoCov","hits":"0",},
{"lineNum":"   85","line":"\t\tfor strategy_opt in \'\"$strategy_opts\"\'","class":"lineNoCov","hits":"0",},
{"lineNum":"   86","line":"\t\tdo"},
{"lineNum":"   87","line":"\t\t\tstrategy_args=\"$strategy_args -X$(git rev-parse --sq-quote \"${strategy_opt#--}\")\"","class":"lineNoCov","hits":"0",},
{"lineNum":"   88","line":"\t\tdone"},
{"lineNum":"   89","line":"\t\'","class":"lineNoCov","hits":"0",},
{"lineNum":"   90","line":"fi"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"GIT_CHERRY_PICK_HELP=\"$resolvemsg\"","class":"lineCov","hits":"1",},
{"lineNum":"   93","line":"export GIT_CHERRY_PICK_HELP","class":"lineCov","hits":"1",},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"comment_char=$(git config --get core.commentchar 2>/dev/null | cut -c1)","class":"lineCov","hits":"1",},
{"lineNum":"   96","line":": ${comment_char:=#}","class":"lineCov","hits":"1",},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"warn () {","class":"lineNoCov","hits":"0",},
{"lineNum":"   99","line":"\tprintf \'%s\\n\' \"$*\" >&2","class":"lineCov","hits":"1",},
{"lineNum":"  100","line":"}"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"# Output the commit message for the specified commit."},
{"lineNum":"  103","line":"commit_message () {","class":"lineNoCov","hits":"0",},
{"lineNum":"  104","line":"\tgit cat-file commit \"$1\" | sed \"1,/^$/d\"","class":"lineCov","hits":"1",},
{"lineNum":"  105","line":"}"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"orig_reflog_action=\"$GIT_REFLOG_ACTION\"","class":"lineCov","hits":"1",},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"comment_for_reflog () {","class":"lineNoCov","hits":"0",},
{"lineNum":"  110","line":"\tcase \"$orig_reflog_action\" in","class":"lineCov","hits":"1",},
{"lineNum":"  111","line":"\t\'\'|rebase*)"},
{"lineNum":"  112","line":"\t\tGIT_REFLOG_ACTION=\"rebase -i ($1)\"","class":"lineCov","hits":"1",},
{"lineNum":"  113","line":"\t\texport GIT_REFLOG_ACTION","class":"lineCov","hits":"1",},
{"lineNum":"  114","line":"\t\t;;"},
{"lineNum":"  115","line":"\tesac"},
{"lineNum":"  116","line":"}"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"last_count=","class":"lineCov","hits":"1",},
{"lineNum":"  119","line":"mark_action_done () {","class":"lineNoCov","hits":"0",},
{"lineNum":"  120","line":"\tsed -e 1q < \"$todo\" >> \"$done\"","class":"lineCov","hits":"1",},
{"lineNum":"  121","line":"\tsed -e 1d < \"$todo\" >> \"$todo\".new","class":"lineCov","hits":"1",},
{"lineNum":"  122","line":"\tmv -f \"$todo\".new \"$todo\"","class":"lineCov","hits":"1",},
{"lineNum":"  123","line":"\tnew_count=$(git stripspace --strip-comments <\"$done\" | wc -l)","class":"lineCov","hits":"1",},
{"lineNum":"  124","line":"\techo $new_count >\"$msgnum\"","class":"lineCov","hits":"1",},
{"lineNum":"  125","line":"\ttotal=$(($new_count + $(git stripspace --strip-comments <\"$todo\" | wc -l)))","class":"lineCov","hits":"1",},
{"lineNum":"  126","line":"\techo $total >\"$end\"","class":"lineCov","hits":"1",},
{"lineNum":"  127","line":"\tif test \"$last_count\" != \"$new_count\"","class":"lineCov","hits":"1",},
{"lineNum":"  128","line":"\tthen"},
{"lineNum":"  129","line":"\t\tlast_count=$new_count","class":"lineCov","hits":"1",},
{"lineNum":"  130","line":"\t\tprintf \"Rebasing (%d/%d)\\r\" $new_count $total","class":"lineCov","hits":"1",},
{"lineNum":"  131","line":"\t\ttest -z \"$verbose\" || echo","class":"lineCov","hits":"1",},
{"lineNum":"  132","line":"\tfi"},
{"lineNum":"  133","line":"}"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"append_todo_help () {","class":"lineNoCov","hits":"0",},
{"lineNum":"  136","line":"\tgit stripspace --comment-lines >>\"$todo\" <<\\EOF","class":"lineCov","hits":"1",},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"Commands:"},
{"lineNum":"  139","line":" p, pick = use commit"},
{"lineNum":"  140","line":" r, reword = use commit, but edit the commit message"},
{"lineNum":"  141","line":" e, edit = use commit, but stop for amending"},
{"lineNum":"  142","line":" s, squash = use commit, but meld into previous commit"},
{"lineNum":"  143","line":" f, fixup = like \"squash\", but discard this commit\'s log message"},
{"lineNum":"  144","line":" x, exec = run command (the rest of the line) using shell"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"These lines can be re-ordered; they are executed from top to bottom."},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"If you remove a line here THAT COMMIT WILL BE LOST."},
{"lineNum":"  149","line":"EOF"},
{"lineNum":"  150","line":"}"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"make_patch () {"},
{"lineNum":"  153","line":"\tsha1_and_parents=\"$(git rev-list --parents -1 \"$1\")\""},
{"lineNum":"  154","line":"\tcase \"$sha1_and_parents\" in"},
{"lineNum":"  155","line":"\t?*\' \'?*\' \'?*)"},
{"lineNum":"  156","line":"\t\tgit diff --cc $sha1_and_parents"},
{"lineNum":"  157","line":"\t\t;;"},
{"lineNum":"  158","line":"\t?*\' \'?*)"},
{"lineNum":"  159","line":"\t\tgit diff-tree -p \"$1^!\""},
{"lineNum":"  160","line":"\t\t;;"},
{"lineNum":"  161","line":"\t*)"},
{"lineNum":"  162","line":"\t\techo \"Root commit\""},
{"lineNum":"  163","line":"\t\t;;"},
{"lineNum":"  164","line":"\tesac > \"$state_dir\"/patch"},
{"lineNum":"  165","line":"\ttest -f \"$msg\" ||"},
{"lineNum":"  166","line":"\t\tcommit_message \"$1\" > \"$msg\""},
{"lineNum":"  167","line":"\ttest -f \"$author_script\" ||"},
{"lineNum":"  168","line":"\t\tget_author_ident_from_commit \"$1\" > \"$author_script\""},
{"lineNum":"  169","line":"}"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"die_with_patch () {"},
{"lineNum":"  172","line":"\techo \"$1\" > \"$state_dir\"/stopped-sha"},
{"lineNum":"  173","line":"\tmake_patch \"$1\""},
{"lineNum":"  174","line":"\tgit rerere"},
{"lineNum":"  175","line":"\tdie \"$2\""},
{"lineNum":"  176","line":"}"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"exit_with_patch () {"},
{"lineNum":"  179","line":"\techo \"$1\" > \"$state_dir\"/stopped-sha"},
{"lineNum":"  180","line":"\tmake_patch $1"},
{"lineNum":"  181","line":"\tgit rev-parse --verify HEAD > \"$amend\""},
{"lineNum":"  182","line":"\tgpg_sign_opt_quoted=${gpg_sign_opt:+$(git rev-parse --sq-quote \"$gpg_sign_opt\")}"},
{"lineNum":"  183","line":"\twarn \"You can amend the commit now, with\""},
{"lineNum":"  184","line":"\twarn"},
{"lineNum":"  185","line":"\twarn \"\tgit commit --amend $gpg_sign_opt_quoted\""},
{"lineNum":"  186","line":"\twarn"},
{"lineNum":"  187","line":"\twarn \"Once you are satisfied with your changes, run\""},
{"lineNum":"  188","line":"\twarn"},
{"lineNum":"  189","line":"\twarn \"\tgit rebase --continue\""},
{"lineNum":"  190","line":"\twarn"},
{"lineNum":"  191","line":"\texit $2"},
{"lineNum":"  192","line":"}"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"die_abort () {"},
{"lineNum":"  195","line":"\trm -rf \"$state_dir\""},
{"lineNum":"  196","line":"\tdie \"$1\""},
{"lineNum":"  197","line":"}"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"has_action () {"},
{"lineNum":"  200","line":"\ttest -n \"$(git stripspace --strip-comments <\"$1\")\""},
{"lineNum":"  201","line":"}"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"is_empty_commit() {"},
{"lineNum":"  204","line":"\ttree=$(git rev-parse -q --verify \"$1\"^{tree} 2>/dev/null ||"},
{"lineNum":"  205","line":"\t\tdie \"$1: not a commit that can be picked\")"},
{"lineNum":"  206","line":"\tptree=$(git rev-parse -q --verify \"$1\"^^{tree} 2>/dev/null ||"},
{"lineNum":"  207","line":"\t\tptree=4b825dc642cb6eb9a060e54bf8d69288fbee4904)"},
{"lineNum":"  208","line":"\ttest \"$tree\" = \"$ptree\""},
{"lineNum":"  209","line":"}"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"is_merge_commit()"},
{"lineNum":"  212","line":"{"},
{"lineNum":"  213","line":"\tgit rev-parse --verify --quiet \"$1\"^2 >/dev/null 2>&1"},
{"lineNum":"  214","line":"}"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"# Run command with GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL, and"},
{"lineNum":"  217","line":"# GIT_AUTHOR_DATE exported from the current environment."},
{"lineNum":"  218","line":"do_with_author () {"},
{"lineNum":"  219","line":"\t("},
{"lineNum":"  220","line":"\t\texport GIT_AUTHOR_NAME GIT_AUTHOR_EMAIL GIT_AUTHOR_DATE"},
{"lineNum":"  221","line":"\t\t\"$@\""},
{"lineNum":"  222","line":"\t)"},
{"lineNum":"  223","line":"}"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"git_sequence_editor () {"},
{"lineNum":"  226","line":"\tif test -z \"$GIT_SEQUENCE_EDITOR\""},
{"lineNum":"  227","line":"\tthen"},
{"lineNum":"  228","line":"\t\tGIT_SEQUENCE_EDITOR=\"$(git config sequence.editor)\""},
{"lineNum":"  229","line":"\t\tif [ -z \"$GIT_SEQUENCE_EDITOR\" ]"},
{"lineNum":"  230","line":"\t\tthen"},
{"lineNum":"  231","line":"\t\t\tGIT_SEQUENCE_EDITOR=\"$(git var GIT_EDITOR)\" || return $?"},
{"lineNum":"  232","line":"\t\tfi"},
{"lineNum":"  233","line":"\tfi"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"\teval \"$GIT_SEQUENCE_EDITOR\" \'\"$@\"\'"},
{"lineNum":"  236","line":"}"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"pick_one () {"},
{"lineNum":"  239","line":"\tff=--ff"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"\tcase \"$1\" in -n) sha1=$2; ff= ;; *) sha1=$1 ;; esac"},
{"lineNum":"  242","line":"\tcase \"$force_rebase\" in \'\') ;; ?*) ff= ;; esac"},
{"lineNum":"  243","line":"\toutput git rev-parse --verify $sha1 || die \"Invalid commit name: $sha1\""},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"\tif is_empty_commit \"$sha1\""},
{"lineNum":"  246","line":"\tthen"},
{"lineNum":"  247","line":"\t\tempty_args=\"--allow-empty\""},
{"lineNum":"  248","line":"\tfi"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"\ttest -d \"$rewritten\" &&"},
{"lineNum":"  251","line":"\t\tpick_one_preserving_merges \"$@\" && return"},
{"lineNum":"  252","line":"\toutput eval git cherry-pick \\"},
{"lineNum":"  253","line":"\t\t\t${gpg_sign_opt:+$(git rev-parse --sq-quote \"$gpg_sign_opt\")} \\"},
{"lineNum":"  254","line":"\t\t\t\"$strategy_args\" $empty_args $ff \"$@\""},
{"lineNum":"  255","line":"}"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"pick_one_preserving_merges () {"},
{"lineNum":"  258","line":"\tfast_forward=t"},
{"lineNum":"  259","line":"\tcase \"$1\" in"},
{"lineNum":"  260","line":"\t-n)"},
{"lineNum":"  261","line":"\t\tfast_forward=f"},
{"lineNum":"  262","line":"\t\tsha1=$2"},
{"lineNum":"  263","line":"\t\t;;"},
{"lineNum":"  264","line":"\t*)"},
{"lineNum":"  265","line":"\t\tsha1=$1"},
{"lineNum":"  266","line":"\t\t;;"},
{"lineNum":"  267","line":"\tesac"},
{"lineNum":"  268","line":"\tsha1=$(git rev-parse $sha1)"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"\tif test -f \"$state_dir\"/current-commit"},
{"lineNum":"  271","line":"\tthen"},
{"lineNum":"  272","line":"\t\tif test \"$fast_forward\" = t"},
{"lineNum":"  273","line":"\t\tthen"},
{"lineNum":"  274","line":"\t\t\twhile read current_commit"},
{"lineNum":"  275","line":"\t\t\tdo"},
{"lineNum":"  276","line":"\t\t\t\tgit rev-parse HEAD > \"$rewritten\"/$current_commit"},
{"lineNum":"  277","line":"\t\t\tdone <\"$state_dir\"/current-commit"},
{"lineNum":"  278","line":"\t\t\trm \"$state_dir\"/current-commit ||"},
{"lineNum":"  279","line":"\t\t\tdie \"Cannot write current commit\'s replacement sha1\""},
{"lineNum":"  280","line":"\t\tfi"},
{"lineNum":"  281","line":"\tfi"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"\techo $sha1 >> \"$state_dir\"/current-commit"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"\t# rewrite parents; if none were rewritten, we can fast-forward."},
{"lineNum":"  286","line":"\tnew_parents="},
{"lineNum":"  287","line":"\tpend=\" $(git rev-list --parents -1 $sha1 | cut -d\' \' -s -f2-)\""},
{"lineNum":"  288","line":"\tif test \"$pend\" = \" \""},
{"lineNum":"  289","line":"\tthen"},
{"lineNum":"  290","line":"\t\tpend=\" root\""},
{"lineNum":"  291","line":"\tfi"},
{"lineNum":"  292","line":"\twhile [ \"$pend\" != \"\" ]"},
{"lineNum":"  293","line":"\tdo"},
{"lineNum":"  294","line":"\t\tp=$(expr \"$pend\" : \' \\([^ ]*\\)\')"},
{"lineNum":"  295","line":"\t\tpend=\"${pend# $p}\""},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"\t\tif test -f \"$rewritten\"/$p"},
{"lineNum":"  298","line":"\t\tthen"},
{"lineNum":"  299","line":"\t\t\tnew_p=$(cat \"$rewritten\"/$p)"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"\t\t\t# If the todo reordered commits, and our parent is marked for"},
{"lineNum":"  302","line":"\t\t\t# rewriting, but hasn\'t been gotten to yet, assume the user meant to"},
{"lineNum":"  303","line":"\t\t\t# drop it on top of the current HEAD"},
{"lineNum":"  304","line":"\t\t\tif test -z \"$new_p\""},
{"lineNum":"  305","line":"\t\t\tthen"},
{"lineNum":"  306","line":"\t\t\t\tnew_p=$(git rev-parse HEAD)"},
{"lineNum":"  307","line":"\t\t\tfi"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"\t\t\ttest $p != $new_p && fast_forward=f"},
{"lineNum":"  310","line":"\t\t\tcase \"$new_parents\" in"},
{"lineNum":"  311","line":"\t\t\t*$new_p*)"},
{"lineNum":"  312","line":"\t\t\t\t;; # do nothing; that parent is already there"},
{"lineNum":"  313","line":"\t\t\t*)"},
{"lineNum":"  314","line":"\t\t\t\tnew_parents=\"$new_parents $new_p\""},
{"lineNum":"  315","line":"\t\t\t\t;;"},
{"lineNum":"  316","line":"\t\t\tesac"},
{"lineNum":"  317","line":"\t\telse"},
{"lineNum":"  318","line":"\t\t\tif test -f \"$dropped\"/$p"},
{"lineNum":"  319","line":"\t\t\tthen"},
{"lineNum":"  320","line":"\t\t\t\tfast_forward=f"},
{"lineNum":"  321","line":"\t\t\t\treplacement=\"$(cat \"$dropped\"/$p)\""},
{"lineNum":"  322","line":"\t\t\t\ttest -z \"$replacement\" && replacement=root"},
{"lineNum":"  323","line":"\t\t\t\tpend=\" $replacement$pend\""},
{"lineNum":"  324","line":"\t\t\telse"},
{"lineNum":"  325","line":"\t\t\t\tnew_parents=\"$new_parents $p\""},
{"lineNum":"  326","line":"\t\t\tfi"},
{"lineNum":"  327","line":"\t\tfi"},
{"lineNum":"  328","line":"\tdone"},
{"lineNum":"  329","line":"\tcase $fast_forward in"},
{"lineNum":"  330","line":"\tt)"},
{"lineNum":"  331","line":"\t\toutput warn \"Fast-forward to $sha1\""},
{"lineNum":"  332","line":"\t\toutput git reset --hard $sha1 ||"},
{"lineNum":"  333","line":"\t\t\tdie \"Cannot fast-forward to $sha1\""},
{"lineNum":"  334","line":"\t\t;;"},
{"lineNum":"  335","line":"\tf)"},
{"lineNum":"  336","line":"\t\tfirst_parent=$(expr \"$new_parents\" : \' \\([^ ]*\\)\')"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"\t\tif [ \"$1\" != \"-n\" ]"},
{"lineNum":"  339","line":"\t\tthen"},
{"lineNum":"  340","line":"\t\t\t# detach HEAD to current parent"},
{"lineNum":"  341","line":"\t\t\toutput git checkout $first_parent 2> /dev/null ||"},
{"lineNum":"  342","line":"\t\t\t\tdie \"Cannot move HEAD to $first_parent\""},
{"lineNum":"  343","line":"\t\tfi"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"\t\tcase \"$new_parents\" in"},
{"lineNum":"  346","line":"\t\t\' \'*\' \'*)"},
{"lineNum":"  347","line":"\t\t\ttest \"a$1\" = a-n && die \"Refusing to squash a merge: $sha1\""},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"\t\t\t# redo merge"},
{"lineNum":"  350","line":"\t\t\tauthor_script_content=$(get_author_ident_from_commit $sha1)"},
{"lineNum":"  351","line":"\t\t\teval \"$author_script_content\""},
{"lineNum":"  352","line":"\t\t\tmsg_content=\"$(commit_message $sha1)\""},
{"lineNum":"  353","line":"\t\t\t# No point in merging the first parent, that\'s HEAD"},
{"lineNum":"  354","line":"\t\t\tnew_parents=${new_parents# $first_parent}"},
{"lineNum":"  355","line":"\t\t\tmerge_args=\"--no-log --no-ff\""},
{"lineNum":"  356","line":"\t\t\tif ! do_with_author output eval \\"},
{"lineNum":"  357","line":"\t\t\t\'git merge ${gpg_sign_opt:+\"$gpg_sign_opt\"} \\"},
{"lineNum":"  358","line":"\t\t\t\t$merge_args $strategy_args -m \"$msg_content\" $new_parents\'"},
{"lineNum":"  359","line":"\t\t\tthen"},
{"lineNum":"  360","line":"\t\t\t\tprintf \"%s\\n\" \"$msg_content\" > \"$GIT_DIR\"/MERGE_MSG"},
{"lineNum":"  361","line":"\t\t\t\tdie_with_patch $sha1 \"Error redoing merge $sha1\""},
{"lineNum":"  362","line":"\t\t\tfi"},
{"lineNum":"  363","line":"\t\t\techo \"$sha1 $(git rev-parse HEAD^0)\" >> \"$rewritten_list\""},
{"lineNum":"  364","line":"\t\t\t;;"},
{"lineNum":"  365","line":"\t\t*)"},
{"lineNum":"  366","line":"\t\t\toutput eval git cherry-pick \\"},
{"lineNum":"  367","line":"\t\t\t\t${gpg_sign_opt:+$(git rev-parse --sq-quote \"$gpg_sign_opt\")} \\"},
{"lineNum":"  368","line":"\t\t\t\t\"$strategy_args\" \"$@\" ||"},
{"lineNum":"  369","line":"\t\t\t\tdie_with_patch $sha1 \"Could not pick $sha1\""},
{"lineNum":"  370","line":"\t\t\t;;"},
{"lineNum":"  371","line":"\t\tesac"},
{"lineNum":"  372","line":"\t\t;;"},
{"lineNum":"  373","line":"\tesac"},
{"lineNum":"  374","line":"}"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"nth_string () {"},
{"lineNum":"  377","line":"\tcase \"$1\" in"},
{"lineNum":"  378","line":"\t*1[0-9]|*[04-9]) echo \"$1\"th;;"},
{"lineNum":"  379","line":"\t*1) echo \"$1\"st;;"},
{"lineNum":"  380","line":"\t*2) echo \"$1\"nd;;"},
{"lineNum":"  381","line":"\t*3) echo \"$1\"rd;;"},
{"lineNum":"  382","line":"\tesac"},
{"lineNum":"  383","line":"}"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"update_squash_messages () {"},
{"lineNum":"  386","line":"\tif test -f \"$squash_msg\"; then"},
{"lineNum":"  387","line":"\t\tmv \"$squash_msg\" \"$squash_msg\".bak || exit"},
{"lineNum":"  388","line":"\t\tcount=$(($(sed -n \\"},
{"lineNum":"  389","line":"\t\t\t-e \"1s/^. This is a combination of \\(.*\\) commits\\./\\1/p\" \\"},
{"lineNum":"  390","line":"\t\t\t-e \"q\" < \"$squash_msg\".bak)+1))"},
{"lineNum":"  391","line":"\t\t{"},
{"lineNum":"  392","line":"\t\t\tprintf \'%s\\n\' \"$comment_char This is a combination of $count commits.\""},
{"lineNum":"  393","line":"\t\t\tsed -e 1d -e \'2,/^./{"},
{"lineNum":"  394","line":"\t\t\t\t/^$/d"},
{"lineNum":"  395","line":"\t\t\t}\' <\"$squash_msg\".bak"},
{"lineNum":"  396","line":"\t\t} >\"$squash_msg\""},
{"lineNum":"  397","line":"\telse"},
{"lineNum":"  398","line":"\t\tcommit_message HEAD > \"$fixup_msg\" || die \"Cannot write $fixup_msg\""},
{"lineNum":"  399","line":"\t\tcount=2"},
{"lineNum":"  400","line":"\t\t{"},
{"lineNum":"  401","line":"\t\t\tprintf \'%s\\n\' \"$comment_char This is a combination of 2 commits.\""},
{"lineNum":"  402","line":"\t\t\tprintf \'%s\\n\' \"$comment_char The first commit\'s message is:\""},
{"lineNum":"  403","line":"\t\t\techo"},
{"lineNum":"  404","line":"\t\t\tcat \"$fixup_msg\""},
{"lineNum":"  405","line":"\t\t} >\"$squash_msg\""},
{"lineNum":"  406","line":"\tfi"},
{"lineNum":"  407","line":"\tcase $1 in"},
{"lineNum":"  408","line":"\tsquash)"},
{"lineNum":"  409","line":"\t\trm -f \"$fixup_msg\""},
{"lineNum":"  410","line":"\t\techo"},
{"lineNum":"  411","line":"\t\tprintf \'%s\\n\' \"$comment_char This is the $(nth_string $count) commit message:\""},
{"lineNum":"  412","line":"\t\techo"},
{"lineNum":"  413","line":"\t\tcommit_message $2"},
{"lineNum":"  414","line":"\t\t;;"},
{"lineNum":"  415","line":"\tfixup)"},
{"lineNum":"  416","line":"\t\techo"},
{"lineNum":"  417","line":"\t\tprintf \'%s\\n\' \"$comment_char The $(nth_string $count) commit message will be skipped:\""},
{"lineNum":"  418","line":"\t\techo"},
{"lineNum":"  419","line":"\t\t# Change the space after the comment character to TAB:"},
{"lineNum":"  420","line":"\t\tcommit_message $2 | git stripspace --comment-lines | sed -e \'s/ /\t/\'"},
{"lineNum":"  421","line":"\t\t;;"},
{"lineNum":"  422","line":"\tesac >>\"$squash_msg\""},
{"lineNum":"  423","line":"}"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"peek_next_command () {"},
{"lineNum":"  426","line":"\tgit stripspace --strip-comments <\"$todo\" | sed -n -e \'s/ .*//p\' -e q"},
{"lineNum":"  427","line":"}"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"# A squash/fixup has failed.  Prepare the long version of the squash"},
{"lineNum":"  430","line":"# commit message, then die_with_patch.  This code path requires the"},
{"lineNum":"  431","line":"# user to edit the combined commit message for all commits that have"},
{"lineNum":"  432","line":"# been squashed/fixedup so far.  So also erase the old squash"},
{"lineNum":"  433","line":"# messages, effectively causing the combined commit to be used as the"},
{"lineNum":"  434","line":"# new basis for any further squash/fixups.  Args: sha1 rest"},
{"lineNum":"  435","line":"die_failed_squash() {"},
{"lineNum":"  436","line":"\tmv \"$squash_msg\" \"$msg\" || exit"},
{"lineNum":"  437","line":"\trm -f \"$fixup_msg\""},
{"lineNum":"  438","line":"\tcp \"$msg\" \"$GIT_DIR\"/MERGE_MSG || exit"},
{"lineNum":"  439","line":"\twarn"},
{"lineNum":"  440","line":"\twarn \"Could not apply $1... $2\""},
{"lineNum":"  441","line":"\tdie_with_patch $1 \"\""},
{"lineNum":"  442","line":"}"},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"flush_rewritten_pending() {"},
{"lineNum":"  445","line":"\ttest -s \"$rewritten_pending\" || return"},
{"lineNum":"  446","line":"\tnewsha1=\"$(git rev-parse HEAD^0)\""},
{"lineNum":"  447","line":"\tsed \"s/$/ $newsha1/\" < \"$rewritten_pending\" >> \"$rewritten_list\""},
{"lineNum":"  448","line":"\trm -f \"$rewritten_pending\""},
{"lineNum":"  449","line":"}"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"record_in_rewritten() {"},
{"lineNum":"  452","line":"\toldsha1=\"$(git rev-parse $1)\""},
{"lineNum":"  453","line":"\techo \"$oldsha1\" >> \"$rewritten_pending\""},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"\tcase \"$(peek_next_command)\" in"},
{"lineNum":"  456","line":"\tsquash|s|fixup|f)"},
{"lineNum":"  457","line":"\t\t;;"},
{"lineNum":"  458","line":"\t*)"},
{"lineNum":"  459","line":"\t\tflush_rewritten_pending"},
{"lineNum":"  460","line":"\t\t;;"},
{"lineNum":"  461","line":"\tesac"},
{"lineNum":"  462","line":"}"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"do_pick () {"},
{"lineNum":"  465","line":"\tif test \"$(git rev-parse HEAD)\" = \"$squash_onto\""},
{"lineNum":"  466","line":"\tthen"},
{"lineNum":"  467","line":"\t\t# Set the correct commit message and author info on the"},
{"lineNum":"  468","line":"\t\t# sentinel root before cherry-picking the original changes"},
{"lineNum":"  469","line":"\t\t# without committing (-n).  Finally, update the sentinel again"},
{"lineNum":"  470","line":"\t\t# to include these changes.  If the cherry-pick results in a"},
{"lineNum":"  471","line":"\t\t# conflict, this means our behaviour is similar to a standard"},
{"lineNum":"  472","line":"\t\t# failed cherry-pick during rebase, with a dirty index to"},
{"lineNum":"  473","line":"\t\t# resolve before manually running git commit --amend then git"},
{"lineNum":"  474","line":"\t\t# rebase --continue."},
{"lineNum":"  475","line":"\t\tgit commit --allow-empty --allow-empty-message --amend \\"},
{"lineNum":"  476","line":"\t\t\t   --no-post-rewrite -n -q -C $1 &&"},
{"lineNum":"  477","line":"\t\t\tpick_one -n $1 &&"},
{"lineNum":"  478","line":"\t\t\tgit commit --allow-empty --allow-empty-message \\"},
{"lineNum":"  479","line":"\t\t\t\t   --amend --no-post-rewrite -n -q -C $1 \\"},
{"lineNum":"  480","line":"\t\t\t\t   ${gpg_sign_opt:+\"$gpg_sign_opt\"} ||"},
{"lineNum":"  481","line":"\t\t\tdie_with_patch $1 \"Could not apply $1... $2\""},
{"lineNum":"  482","line":"\telse"},
{"lineNum":"  483","line":"\t\tpick_one $1 ||"},
{"lineNum":"  484","line":"\t\t\tdie_with_patch $1 \"Could not apply $1... $2\""},
{"lineNum":"  485","line":"\tfi"},
{"lineNum":"  486","line":"}"},
{"lineNum":"  487","line":""},
{"lineNum":"  488","line":"do_next () {"},
{"lineNum":"  489","line":"\trm -f \"$msg\" \"$author_script\" \"$amend\" || exit"},
{"lineNum":"  490","line":"\tread -r command sha1 rest < \"$todo\""},
{"lineNum":"  491","line":"\tcase \"$command\" in"},
{"lineNum":"  492","line":"\t\"$comment_char\"*|\'\'|noop)"},
{"lineNum":"  493","line":"\t\tmark_action_done"},
{"lineNum":"  494","line":"\t\t;;"},
{"lineNum":"  495","line":"\tpick|p)"},
{"lineNum":"  496","line":"\t\tcomment_for_reflog pick"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"\t\tmark_action_done"},
{"lineNum":"  499","line":"\t\tdo_pick $sha1 \"$rest\""},
{"lineNum":"  500","line":"\t\trecord_in_rewritten $sha1"},
{"lineNum":"  501","line":"\t\t;;"},
{"lineNum":"  502","line":"\treword|r)"},
{"lineNum":"  503","line":"\t\tcomment_for_reflog reword"},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"\t\tmark_action_done"},
{"lineNum":"  506","line":"\t\tdo_pick $sha1 \"$rest\""},
{"lineNum":"  507","line":"\t\tgit commit --amend --no-post-rewrite ${gpg_sign_opt:+\"$gpg_sign_opt\"} || {"},
{"lineNum":"  508","line":"\t\t\twarn \"Could not amend commit after successfully picking $sha1... $rest\""},
{"lineNum":"  509","line":"\t\t\twarn \"This is most likely due to an empty commit message, or the pre-commit hook\""},
{"lineNum":"  510","line":"\t\t\twarn \"failed. If the pre-commit hook failed, you may need to resolve the issue before\""},
{"lineNum":"  511","line":"\t\t\twarn \"you are able to reword the commit.\""},
{"lineNum":"  512","line":"\t\t\texit_with_patch $sha1 1"},
{"lineNum":"  513","line":"\t\t}"},
{"lineNum":"  514","line":"\t\trecord_in_rewritten $sha1"},
{"lineNum":"  515","line":"\t\t;;"},
{"lineNum":"  516","line":"\tedit|e)"},
{"lineNum":"  517","line":"\t\tcomment_for_reflog edit"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"\t\tmark_action_done"},
{"lineNum":"  520","line":"\t\tdo_pick $sha1 \"$rest\""},
{"lineNum":"  521","line":"\t\twarn \"Stopped at $sha1... $rest\""},
{"lineNum":"  522","line":"\t\texit_with_patch $sha1 0"},
{"lineNum":"  523","line":"\t\t;;"},
{"lineNum":"  524","line":"\tsquash|s|fixup|f)"},
{"lineNum":"  525","line":"\t\tcase \"$command\" in"},
{"lineNum":"  526","line":"\t\tsquash|s)"},
{"lineNum":"  527","line":"\t\t\tsquash_style=squash"},
{"lineNum":"  528","line":"\t\t\t;;"},
{"lineNum":"  529","line":"\t\tfixup|f)"},
{"lineNum":"  530","line":"\t\t\tsquash_style=fixup"},
{"lineNum":"  531","line":"\t\t\t;;"},
{"lineNum":"  532","line":"\t\tesac"},
{"lineNum":"  533","line":"\t\tcomment_for_reflog $squash_style"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"\t\ttest -f \"$done\" && has_action \"$done\" ||"},
{"lineNum":"  536","line":"\t\t\tdie \"Cannot \'$squash_style\' without a previous commit\""},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"\t\tmark_action_done"},
{"lineNum":"  539","line":"\t\tupdate_squash_messages $squash_style $sha1"},
{"lineNum":"  540","line":"\t\tauthor_script_content=$(get_author_ident_from_commit HEAD)"},
{"lineNum":"  541","line":"\t\techo \"$author_script_content\" > \"$author_script\""},
{"lineNum":"  542","line":"\t\teval \"$author_script_content\""},
{"lineNum":"  543","line":"\t\tif ! pick_one -n $sha1"},
{"lineNum":"  544","line":"\t\tthen"},
{"lineNum":"  545","line":"\t\t\tgit rev-parse --verify HEAD >\"$amend\""},
{"lineNum":"  546","line":"\t\t\tdie_failed_squash $sha1 \"$rest\""},
{"lineNum":"  547","line":"\t\tfi"},
{"lineNum":"  548","line":"\t\tcase \"$(peek_next_command)\" in"},
{"lineNum":"  549","line":"\t\tsquash|s|fixup|f)"},
{"lineNum":"  550","line":"\t\t\t# This is an intermediate commit; its message will only be"},
{"lineNum":"  551","line":"\t\t\t# used in case of trouble.  So use the long version:"},
{"lineNum":"  552","line":"\t\t\tdo_with_author output git commit --amend --no-verify -F \"$squash_msg\" \\"},
{"lineNum":"  553","line":"\t\t\t\t${gpg_sign_opt:+\"$gpg_sign_opt\"} ||"},
{"lineNum":"  554","line":"\t\t\t\tdie_failed_squash $sha1 \"$rest\""},
{"lineNum":"  555","line":"\t\t\t;;"},
{"lineNum":"  556","line":"\t\t*)"},
{"lineNum":"  557","line":"\t\t\t# This is the final command of this squash/fixup group"},
{"lineNum":"  558","line":"\t\t\tif test -f \"$fixup_msg\""},
{"lineNum":"  559","line":"\t\t\tthen"},
{"lineNum":"  560","line":"\t\t\t\tdo_with_author git commit --amend --no-verify -F \"$fixup_msg\" \\"},
{"lineNum":"  561","line":"\t\t\t\t\t${gpg_sign_opt:+\"$gpg_sign_opt\"} ||"},
{"lineNum":"  562","line":"\t\t\t\t\tdie_failed_squash $sha1 \"$rest\""},
{"lineNum":"  563","line":"\t\t\telse"},
{"lineNum":"  564","line":"\t\t\t\tcp \"$squash_msg\" \"$GIT_DIR\"/SQUASH_MSG || exit"},
{"lineNum":"  565","line":"\t\t\t\trm -f \"$GIT_DIR\"/MERGE_MSG"},
{"lineNum":"  566","line":"\t\t\t\tdo_with_author git commit --amend --no-verify -F \"$GIT_DIR\"/SQUASH_MSG -e \\"},
{"lineNum":"  567","line":"\t\t\t\t\t${gpg_sign_opt:+\"$gpg_sign_opt\"} ||"},
{"lineNum":"  568","line":"\t\t\t\t\tdie_failed_squash $sha1 \"$rest\""},
{"lineNum":"  569","line":"\t\t\tfi"},
{"lineNum":"  570","line":"\t\t\trm -f \"$squash_msg\" \"$fixup_msg\""},
{"lineNum":"  571","line":"\t\t\t;;"},
{"lineNum":"  572","line":"\t\tesac"},
{"lineNum":"  573","line":"\t\trecord_in_rewritten $sha1"},
{"lineNum":"  574","line":"\t\t;;"},
{"lineNum":"  575","line":"\tx|\"exec\")"},
{"lineNum":"  576","line":"\t\tread -r command rest < \"$todo\""},
{"lineNum":"  577","line":"\t\tmark_action_done"},
{"lineNum":"  578","line":"\t\tprintf \'Executing: %s\\n\' \"$rest\""},
{"lineNum":"  579","line":"\t\t# \"exec\" command doesn\'t take a sha1 in the todo-list."},
{"lineNum":"  580","line":"\t\t# => can\'t just use $sha1 here."},
{"lineNum":"  581","line":"\t\tgit rev-parse --verify HEAD > \"$state_dir\"/stopped-sha"},
{"lineNum":"  582","line":"\t\t${SHELL:-/bin/sh} -c \"$rest\" # Actual execution"},
{"lineNum":"  583","line":"\t\tstatus=$?"},
{"lineNum":"  584","line":"\t\t# Run in subshell because require_clean_work_tree can die."},
{"lineNum":"  585","line":"\t\tdirty=f"},
{"lineNum":"  586","line":"\t\t(require_clean_work_tree \"rebase\" 2>/dev/null) || dirty=t"},
{"lineNum":"  587","line":"\t\tif test \"$status\" -ne 0"},
{"lineNum":"  588","line":"\t\tthen"},
{"lineNum":"  589","line":"\t\t\twarn \"Execution failed: $rest\""},
{"lineNum":"  590","line":"\t\t\ttest \"$dirty\" = f ||"},
{"lineNum":"  591","line":"\t\t\twarn \"and made changes to the index and/or the working tree\""},
{"lineNum":"  592","line":""},
{"lineNum":"  593","line":"\t\t\twarn \"You can fix the problem, and then run\""},
{"lineNum":"  594","line":"\t\t\twarn"},
{"lineNum":"  595","line":"\t\t\twarn \"\tgit rebase --continue\""},
{"lineNum":"  596","line":"\t\t\twarn"},
{"lineNum":"  597","line":"\t\t\tif test $status -eq 127\t\t# command not found"},
{"lineNum":"  598","line":"\t\t\tthen"},
{"lineNum":"  599","line":"\t\t\t\tstatus=1"},
{"lineNum":"  600","line":"\t\t\tfi"},
{"lineNum":"  601","line":"\t\t\texit \"$status\""},
{"lineNum":"  602","line":"\t\telif test \"$dirty\" = t"},
{"lineNum":"  603","line":"\t\tthen"},
{"lineNum":"  604","line":"\t\t\twarn \"Execution succeeded: $rest\""},
{"lineNum":"  605","line":"\t\t\twarn \"but left changes to the index and/or the working tree\""},
{"lineNum":"  606","line":"\t\t\twarn \"Commit or stash your changes, and then run\""},
{"lineNum":"  607","line":"\t\t\twarn"},
{"lineNum":"  608","line":"\t\t\twarn \"\tgit rebase --continue\""},
{"lineNum":"  609","line":"\t\t\twarn"},
{"lineNum":"  610","line":"\t\t\texit 1"},
{"lineNum":"  611","line":"\t\tfi"},
{"lineNum":"  612","line":"\t\t;;"},
{"lineNum":"  613","line":"\t*)"},
{"lineNum":"  614","line":"\t\twarn \"Unknown command: $command $sha1 $rest\""},
{"lineNum":"  615","line":"\t\tfixtodo=\"Please fix this using \'git rebase --edit-todo\'.\""},
{"lineNum":"  616","line":"\t\tif git rev-parse --verify -q \"$sha1\" >/dev/null"},
{"lineNum":"  617","line":"\t\tthen"},
{"lineNum":"  618","line":"\t\t\tdie_with_patch $sha1 \"$fixtodo\""},
{"lineNum":"  619","line":"\t\telse"},
{"lineNum":"  620","line":"\t\t\tdie \"$fixtodo\""},
{"lineNum":"  621","line":"\t\tfi"},
{"lineNum":"  622","line":"\t\t;;"},
{"lineNum":"  623","line":"\tesac"},
{"lineNum":"  624","line":"\ttest -s \"$todo\" && return"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"\tcomment_for_reflog finish &&"},
{"lineNum":"  627","line":"\tnewhead=$(git rev-parse HEAD) &&"},
{"lineNum":"  628","line":"\tcase $head_name in"},
{"lineNum":"  629","line":"\trefs/*)"},
{"lineNum":"  630","line":"\t\tmessage=\"$GIT_REFLOG_ACTION: $head_name onto $onto\" &&"},
{"lineNum":"  631","line":"\t\tgit update-ref -m \"$message\" $head_name $newhead $orig_head &&"},
{"lineNum":"  632","line":"\t\tgit symbolic-ref \\"},
{"lineNum":"  633","line":"\t\t  -m \"$GIT_REFLOG_ACTION: returning to $head_name\" \\"},
{"lineNum":"  634","line":"\t\t  HEAD $head_name"},
{"lineNum":"  635","line":"\t\t;;"},
{"lineNum":"  636","line":"\tesac && {"},
{"lineNum":"  637","line":"\t\ttest ! -f \"$state_dir\"/verbose ||"},
{"lineNum":"  638","line":"\t\t\tgit diff-tree --stat $orig_head..HEAD"},
{"lineNum":"  639","line":"\t} &&"},
{"lineNum":"  640","line":"\t{"},
{"lineNum":"  641","line":"\t\ttest -s \"$rewritten_list\" &&"},
{"lineNum":"  642","line":"\t\tgit notes copy --for-rewrite=rebase < \"$rewritten_list\" ||"},
{"lineNum":"  643","line":"\t\ttrue # we don\'t care if this copying failed"},
{"lineNum":"  644","line":"\t} &&"},
{"lineNum":"  645","line":"\tif test -x \"$GIT_DIR\"/hooks/post-rewrite &&"},
{"lineNum":"  646","line":"\t\ttest -s \"$rewritten_list\"; then"},
{"lineNum":"  647","line":"\t\t\"$GIT_DIR\"/hooks/post-rewrite rebase < \"$rewritten_list\""},
{"lineNum":"  648","line":"\t\ttrue # we don\'t care if this hook failed"},
{"lineNum":"  649","line":"\tfi &&"},
{"lineNum":"  650","line":"\twarn \"Successfully rebased and updated $head_name.\""},
{"lineNum":"  651","line":""},
{"lineNum":"  652","line":"\treturn 1 # not failure; just to break the do_rest loop"},
{"lineNum":"  653","line":"}"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"# can only return 0, when the infinite loop breaks"},
{"lineNum":"  656","line":"do_rest () {"},
{"lineNum":"  657","line":"\twhile :"},
{"lineNum":"  658","line":"\tdo"},
{"lineNum":"  659","line":"\t\tdo_next || break"},
{"lineNum":"  660","line":"\tdone"},
{"lineNum":"  661","line":"}"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"# skip picking commits whose parents are unchanged"},
{"lineNum":"  664","line":"skip_unnecessary_picks () {"},
{"lineNum":"  665","line":"\tfd=3"},
{"lineNum":"  666","line":"\twhile read -r command rest"},
{"lineNum":"  667","line":"\tdo"},
{"lineNum":"  668","line":"\t\t# fd=3 means we skip the command"},
{"lineNum":"  669","line":"\t\tcase \"$fd,$command\" in"},
{"lineNum":"  670","line":"\t\t3,pick|3,p)"},
{"lineNum":"  671","line":"\t\t\t# pick a commit whose parent is current $onto -> skip"},
{"lineNum":"  672","line":"\t\t\tsha1=${rest%% *}"},
{"lineNum":"  673","line":"\t\t\tcase \"$(git rev-parse --verify --quiet \"$sha1\"^)\" in"},
{"lineNum":"  674","line":"\t\t\t\"$onto\"*)"},
{"lineNum":"  675","line":"\t\t\t\tonto=$sha1"},
{"lineNum":"  676","line":"\t\t\t\t;;"},
{"lineNum":"  677","line":"\t\t\t*)"},
{"lineNum":"  678","line":"\t\t\t\tfd=1"},
{"lineNum":"  679","line":"\t\t\t\t;;"},
{"lineNum":"  680","line":"\t\t\tesac"},
{"lineNum":"  681","line":"\t\t\t;;"},
{"lineNum":"  682","line":"\t\t3,\"$comment_char\"*|3,)"},
{"lineNum":"  683","line":"\t\t\t# copy comments"},
{"lineNum":"  684","line":"\t\t\t;;"},
{"lineNum":"  685","line":"\t\t*)"},
{"lineNum":"  686","line":"\t\t\tfd=1"},
{"lineNum":"  687","line":"\t\t\t;;"},
{"lineNum":"  688","line":"\t\tesac"},
{"lineNum":"  689","line":"\t\tprintf \'%s\\n\' \"$command${rest:+ }$rest\" >&$fd"},
{"lineNum":"  690","line":"\tdone <\"$todo\" >\"$todo.new\" 3>>\"$done\" &&"},
{"lineNum":"  691","line":"\tmv -f \"$todo\".new \"$todo\" &&"},
{"lineNum":"  692","line":"\tcase \"$(peek_next_command)\" in"},
{"lineNum":"  693","line":"\tsquash|s|fixup|f)"},
{"lineNum":"  694","line":"\t\trecord_in_rewritten \"$onto\""},
{"lineNum":"  695","line":"\t\t;;"},
{"lineNum":"  696","line":"\tesac ||"},
{"lineNum":"  697","line":"\tdie \"Could not skip unnecessary pick commands\""},
{"lineNum":"  698","line":"}"},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"transform_todo_ids () {"},
{"lineNum":"  701","line":"\twhile read -r command rest"},
{"lineNum":"  702","line":"\tdo"},
{"lineNum":"  703","line":"\t\tcase \"$command\" in"},
{"lineNum":"  704","line":"\t\t\"$comment_char\"* | exec)"},
{"lineNum":"  705","line":"\t\t\t# Be careful for oddball commands like \'exec\'"},
{"lineNum":"  706","line":"\t\t\t# that do not have a SHA-1 at the beginning of $rest."},
{"lineNum":"  707","line":"\t\t\t;;"},
{"lineNum":"  708","line":"\t\t*)"},
{"lineNum":"  709","line":"\t\t\tsha1=$(git rev-parse --verify --quiet \"$@\" ${rest%% *}) &&"},
{"lineNum":"  710","line":"\t\t\trest=\"$sha1 ${rest#* }\""},
{"lineNum":"  711","line":"\t\t\t;;"},
{"lineNum":"  712","line":"\t\tesac"},
{"lineNum":"  713","line":"\t\tprintf \'%s\\n\' \"$command${rest:+ }$rest\""},
{"lineNum":"  714","line":"\tdone <\"$todo\" >\"$todo.new\" &&"},
{"lineNum":"  715","line":"\tmv -f \"$todo.new\" \"$todo\""},
{"lineNum":"  716","line":"}"},
{"lineNum":"  717","line":""},
{"lineNum":"  718","line":"expand_todo_ids() {"},
{"lineNum":"  719","line":"\ttransform_todo_ids"},
{"lineNum":"  720","line":"}"},
{"lineNum":"  721","line":""},
{"lineNum":"  722","line":"collapse_todo_ids() {"},
{"lineNum":"  723","line":"\ttransform_todo_ids --short"},
{"lineNum":"  724","line":"}"},
{"lineNum":"  725","line":""},
{"lineNum":"  726","line":"# Rearrange the todo list that has both \"pick sha1 msg\" and"},
{"lineNum":"  727","line":"# \"pick sha1 fixup!/squash! msg\" appears in it so that the latter"},
{"lineNum":"  728","line":"# comes immediately after the former, and change \"pick\" to"},
{"lineNum":"  729","line":"# \"fixup\"/\"squash\"."},
{"lineNum":"  730","line":"rearrange_squash () {"},
{"lineNum":"  731","line":"\t# extract fixup!/squash! lines and resolve any referenced sha1\'s"},
{"lineNum":"  732","line":"\twhile read -r pick sha1 message"},
{"lineNum":"  733","line":"\tdo"},
{"lineNum":"  734","line":"\t\tcase \"$message\" in"},
{"lineNum":"  735","line":"\t\t\"squash! \"*|\"fixup! \"*)"},
{"lineNum":"  736","line":"\t\t\taction=\"${message%%!*}\""},
{"lineNum":"  737","line":"\t\t\trest=$message"},
{"lineNum":"  738","line":"\t\t\tprefix="},
{"lineNum":"  739","line":"\t\t\t# skip all squash! or fixup! (but save for later)"},
{"lineNum":"  740","line":"\t\t\twhile :"},
{"lineNum":"  741","line":"\t\t\tdo"},
{"lineNum":"  742","line":"\t\t\t\tcase \"$rest\" in"},
{"lineNum":"  743","line":"\t\t\t\t\"squash! \"*|\"fixup! \"*)"},
{"lineNum":"  744","line":"\t\t\t\t\tprefix=\"$prefix${rest%%!*},\""},
{"lineNum":"  745","line":"\t\t\t\t\trest=\"${rest#*! }\""},
{"lineNum":"  746","line":"\t\t\t\t\t;;"},
{"lineNum":"  747","line":"\t\t\t\t*)"},
{"lineNum":"  748","line":"\t\t\t\t\tbreak"},
{"lineNum":"  749","line":"\t\t\t\t\t;;"},
{"lineNum":"  750","line":"\t\t\t\tesac"},
{"lineNum":"  751","line":"\t\t\tdone"},
{"lineNum":"  752","line":"\t\t\tprintf \'%s %s %s %s\\n\' \"$sha1\" \"$action\" \"$prefix\" \"$rest\""},
{"lineNum":"  753","line":"\t\t\t# if it\'s a single word, try to resolve to a full sha1 and"},
{"lineNum":"  754","line":"\t\t\t# emit a second copy. This allows us to match on both message"},
{"lineNum":"  755","line":"\t\t\t# and on sha1 prefix"},
{"lineNum":"  756","line":"\t\t\tif test \"${rest#* }\" = \"$rest\"; then"},
{"lineNum":"  757","line":"\t\t\t\tfullsha=\"$(git rev-parse -q --verify \"$rest\" 2>/dev/null)\""},
{"lineNum":"  758","line":"\t\t\t\tif test -n \"$fullsha\"; then"},
{"lineNum":"  759","line":"\t\t\t\t\t# prefix the action to uniquely identify this line as"},
{"lineNum":"  760","line":"\t\t\t\t\t# intended for full sha1 match"},
{"lineNum":"  761","line":"\t\t\t\t\techo \"$sha1 +$action $prefix $fullsha\""},
{"lineNum":"  762","line":"\t\t\t\tfi"},
{"lineNum":"  763","line":"\t\t\tfi"},
{"lineNum":"  764","line":"\t\tesac"},
{"lineNum":"  765","line":"\tdone >\"$1.sq\" <\"$1\""},
{"lineNum":"  766","line":"\ttest -s \"$1.sq\" || return"},
{"lineNum":"  767","line":""},
{"lineNum":"  768","line":"\tused="},
{"lineNum":"  769","line":"\twhile read -r pick sha1 message"},
{"lineNum":"  770","line":"\tdo"},
{"lineNum":"  771","line":"\t\tcase \" $used\" in"},
{"lineNum":"  772","line":"\t\t*\" $sha1 \"*) continue ;;"},
{"lineNum":"  773","line":"\t\tesac"},
{"lineNum":"  774","line":"\t\tprintf \'%s\\n\' \"$pick $sha1 $message\""},
{"lineNum":"  775","line":"\t\tused=\"$used$sha1 \""},
{"lineNum":"  776","line":"\t\twhile read -r squash action msg_prefix msg_content"},
{"lineNum":"  777","line":"\t\tdo"},
{"lineNum":"  778","line":"\t\t\tcase \" $used\" in"},
{"lineNum":"  779","line":"\t\t\t*\" $squash \"*) continue ;;"},
{"lineNum":"  780","line":"\t\t\tesac"},
{"lineNum":"  781","line":"\t\t\temit=0"},
{"lineNum":"  782","line":"\t\t\tcase \"$action\" in"},
{"lineNum":"  783","line":"\t\t\t+*)"},
{"lineNum":"  784","line":"\t\t\t\taction=\"${action#+}\""},
{"lineNum":"  785","line":"\t\t\t\t# full sha1 prefix test"},
{"lineNum":"  786","line":"\t\t\t\tcase \"$msg_content\" in \"$sha1\"*) emit=1;; esac ;;"},
{"lineNum":"  787","line":"\t\t\t*)"},
{"lineNum":"  788","line":"\t\t\t\t# message prefix test"},
{"lineNum":"  789","line":"\t\t\t\tcase \"$message\" in \"$msg_content\"*) emit=1;; esac ;;"},
{"lineNum":"  790","line":"\t\t\tesac"},
{"lineNum":"  791","line":"\t\t\tif test $emit = 1; then"},
{"lineNum":"  792","line":"\t\t\t\treal_prefix=$(echo \"$msg_prefix\" | sed \"s/,/! /g\")"},
{"lineNum":"  793","line":"\t\t\t\tprintf \'%s\\n\' \"$action $squash ${real_prefix}$msg_content\""},
{"lineNum":"  794","line":"\t\t\t\tused=\"$used$squash \""},
{"lineNum":"  795","line":"\t\t\tfi"},
{"lineNum":"  796","line":"\t\tdone <\"$1.sq\""},
{"lineNum":"  797","line":"\tdone >\"$1.rearranged\" <\"$1\""},
{"lineNum":"  798","line":"\tcat \"$1.rearranged\" >\"$1\""},
{"lineNum":"  799","line":"\trm -f \"$1.sq\" \"$1.rearranged\""},
{"lineNum":"  800","line":"}"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"# Add commands after a pick or after a squash/fixup serie"},
{"lineNum":"  803","line":"# in the todo list."},
{"lineNum":"  804","line":"add_exec_commands () {"},
{"lineNum":"  805","line":"\t{"},
{"lineNum":"  806","line":"\t\tfirst=t"},
{"lineNum":"  807","line":"\t\twhile read -r insn rest"},
{"lineNum":"  808","line":"\t\tdo"},
{"lineNum":"  809","line":"\t\t\tcase $insn in"},
{"lineNum":"  810","line":"\t\t\tpick)"},
{"lineNum":"  811","line":"\t\t\t\ttest -n \"$first\" ||"},
{"lineNum":"  812","line":"\t\t\t\tprintf \"%s\" \"$cmd\""},
{"lineNum":"  813","line":"\t\t\t\t;;"},
{"lineNum":"  814","line":"\t\t\tesac"},
{"lineNum":"  815","line":"\t\t\tprintf \"%s %s\\n\" \"$insn\" \"$rest\""},
{"lineNum":"  816","line":"\t\t\tfirst="},
{"lineNum":"  817","line":"\t\tdone"},
{"lineNum":"  818","line":"\t\tprintf \"%s\" \"$cmd\""},
{"lineNum":"  819","line":"\t} <\"$1\" >\"$1.new\" &&"},
{"lineNum":"  820","line":"\tmv \"$1.new\" \"$1\""},
{"lineNum":"  821","line":"}"},
{"lineNum":"  822","line":""},
{"lineNum":"  823","line":"# The whole contents of this file is run by dot-sourcing it from"},
{"lineNum":"  824","line":"# inside a shell function.  It used to be that \"return\"s we see"},
{"lineNum":"  825","line":"# below were not inside any function, and expected to return"},
{"lineNum":"  826","line":"# to the function that dot-sourced us."},
{"lineNum":"  827","line":"#"},
{"lineNum":"  828","line":"# However, FreeBSD /bin/sh misbehaves on such a construct and"},
{"lineNum":"  829","line":"# continues to run the statements that follow such a \"return\"."},
{"lineNum":"  830","line":"# As a work-around, we introduce an extra layer of a function"},
{"lineNum":"  831","line":"# here, and immediately call it after defining it."},
{"lineNum":"  832","line":"git_rebase__interactive () {"},
{"lineNum":"  833","line":""},
{"lineNum":"  834","line":"case \"$action\" in"},
{"lineNum":"  835","line":"continue)"},
{"lineNum":"  836","line":"\t# do we have anything to commit?"},
{"lineNum":"  837","line":"\tif git diff-index --cached --quiet HEAD --"},
{"lineNum":"  838","line":"\tthen"},
{"lineNum":"  839","line":"\t\t: Nothing to commit -- skip this"},
{"lineNum":"  840","line":"\telse"},
{"lineNum":"  841","line":"\t\tif ! test -f \"$author_script\""},
{"lineNum":"  842","line":"\t\tthen"},
{"lineNum":"  843","line":"\t\t\tgpg_sign_opt_quoted=${gpg_sign_opt:+$(git rev-parse --sq-quote \"$gpg_sign_opt\")}"},
{"lineNum":"  844","line":"\t\t\tdie \"You have staged changes in your working tree. If these changes are meant to be"},
{"lineNum":"  845","line":"squashed into the previous commit, run:"},
{"lineNum":"  846","line":""},
{"lineNum":"  847","line":"  git commit --amend $gpg_sign_opt_quoted"},
{"lineNum":"  848","line":""},
{"lineNum":"  849","line":"If they are meant to go into a new commit, run:"},
{"lineNum":"  850","line":""},
{"lineNum":"  851","line":"  git commit $gpg_sign_opt_quoted"},
{"lineNum":"  852","line":""},
{"lineNum":"  853","line":"In both case, once you\'re done, continue with:"},
{"lineNum":"  854","line":""},
{"lineNum":"  855","line":"  git rebase --continue"},
{"lineNum":"  856","line":"\""},
{"lineNum":"  857","line":"\t\tfi"},
{"lineNum":"  858","line":"\t\t. \"$author_script\" ||"},
{"lineNum":"  859","line":"\t\t\tdie \"Error trying to find the author identity to amend commit\""},
{"lineNum":"  860","line":"\t\tif test -f \"$amend\""},
{"lineNum":"  861","line":"\t\tthen"},
{"lineNum":"  862","line":"\t\t\tcurrent_head=$(git rev-parse --verify HEAD)"},
{"lineNum":"  863","line":"\t\t\ttest \"$current_head\" = $(cat \"$amend\") ||"},
{"lineNum":"  864","line":"\t\t\tdie \"\\"},
{"lineNum":"  865","line":"You have uncommitted changes in your working tree. Please, commit them"},
{"lineNum":"  866","line":"first and then run \'git rebase --continue\' again.\""},
{"lineNum":"  867","line":"\t\t\tdo_with_author git commit --amend --no-verify -F \"$msg\" -e \\"},
{"lineNum":"  868","line":"\t\t\t\t${gpg_sign_opt:+\"$gpg_sign_opt\"} ||"},
{"lineNum":"  869","line":"\t\t\t\tdie \"Could not commit staged changes.\""},
{"lineNum":"  870","line":"\t\telse"},
{"lineNum":"  871","line":"\t\t\tdo_with_author git commit --no-verify -F \"$msg\" -e \\"},
{"lineNum":"  872","line":"\t\t\t\t${gpg_sign_opt:+\"$gpg_sign_opt\"} ||"},
{"lineNum":"  873","line":"\t\t\t\tdie \"Could not commit staged changes.\""},
{"lineNum":"  874","line":"\t\tfi"},
{"lineNum":"  875","line":"\tfi"},
{"lineNum":"  876","line":""},
{"lineNum":"  877","line":"\trecord_in_rewritten \"$(cat \"$state_dir\"/stopped-sha)\""},
{"lineNum":"  878","line":""},
{"lineNum":"  879","line":"\trequire_clean_work_tree \"rebase\""},
{"lineNum":"  880","line":"\tdo_rest"},
{"lineNum":"  881","line":"\treturn 0"},
{"lineNum":"  882","line":"\t;;"},
{"lineNum":"  883","line":"skip)"},
{"lineNum":"  884","line":"\tgit rerere clear"},
{"lineNum":"  885","line":""},
{"lineNum":"  886","line":"\tdo_rest"},
{"lineNum":"  887","line":"\treturn 0"},
{"lineNum":"  888","line":"\t;;"},
{"lineNum":"  889","line":"edit-todo)"},
{"lineNum":"  890","line":"\tgit stripspace --strip-comments <\"$todo\" >\"$todo\".new"},
{"lineNum":"  891","line":"\tmv -f \"$todo\".new \"$todo\""},
{"lineNum":"  892","line":"\tcollapse_todo_ids"},
{"lineNum":"  893","line":"\tappend_todo_help"},
{"lineNum":"  894","line":"\tgit stripspace --comment-lines >>\"$todo\" <<\\EOF"},
{"lineNum":"  895","line":""},
{"lineNum":"  896","line":"You are editing the todo file of an ongoing interactive rebase."},
{"lineNum":"  897","line":"To continue rebase after editing, run:"},
{"lineNum":"  898","line":"    git rebase --continue"},
{"lineNum":"  899","line":""},
{"lineNum":"  900","line":"EOF"},
{"lineNum":"  901","line":""},
{"lineNum":"  902","line":"\tgit_sequence_editor \"$todo\" ||"},
{"lineNum":"  903","line":"\t\tdie \"Could not execute editor\""},
{"lineNum":"  904","line":"\texpand_todo_ids"},
{"lineNum":"  905","line":""},
{"lineNum":"  906","line":"\texit"},
{"lineNum":"  907","line":"\t;;"},
{"lineNum":"  908","line":"esac"},
{"lineNum":"  909","line":""},
{"lineNum":"  910","line":"git var GIT_COMMITTER_IDENT >/dev/null ||"},
{"lineNum":"  911","line":"\tdie \"You need to set your committer info first\""},
{"lineNum":"  912","line":""},
{"lineNum":"  913","line":"comment_for_reflog start"},
{"lineNum":"  914","line":""},
{"lineNum":"  915","line":"if test ! -z \"$switch_to\""},
{"lineNum":"  916","line":"then"},
{"lineNum":"  917","line":"\tGIT_REFLOG_ACTION=\"$GIT_REFLOG_ACTION: checkout $switch_to\""},
{"lineNum":"  918","line":"\toutput git checkout \"$switch_to\" -- ||"},
{"lineNum":"  919","line":"\tdie \"Could not checkout $switch_to\""},
{"lineNum":"  920","line":""},
{"lineNum":"  921","line":"\tcomment_for_reflog start"},
{"lineNum":"  922","line":"fi"},
{"lineNum":"  923","line":""},
{"lineNum":"  924","line":"orig_head=$(git rev-parse --verify HEAD) || die \"No HEAD?\""},
{"lineNum":"  925","line":"mkdir -p \"$state_dir\" || die \"Could not create temporary $state_dir\""},
{"lineNum":"  926","line":""},
{"lineNum":"  927","line":": > \"$state_dir\"/interactive || die \"Could not mark as interactive\""},
{"lineNum":"  928","line":"write_basic_state"},
{"lineNum":"  929","line":"if test t = \"$preserve_merges\""},
{"lineNum":"  930","line":"then"},
{"lineNum":"  931","line":"\tif test -z \"$rebase_root\""},
{"lineNum":"  932","line":"\tthen"},
{"lineNum":"  933","line":"\t\tmkdir \"$rewritten\" &&"},
{"lineNum":"  934","line":"\t\tfor c in $(git merge-base --all $orig_head $upstream)"},
{"lineNum":"  935","line":"\t\tdo"},
{"lineNum":"  936","line":"\t\t\techo $onto > \"$rewritten\"/$c ||"},
{"lineNum":"  937","line":"\t\t\t\tdie \"Could not init rewritten commits\""},
{"lineNum":"  938","line":"\t\tdone"},
{"lineNum":"  939","line":"\telse"},
{"lineNum":"  940","line":"\t\tmkdir \"$rewritten\" &&"},
{"lineNum":"  941","line":"\t\techo $onto > \"$rewritten\"/root ||"},
{"lineNum":"  942","line":"\t\t\tdie \"Could not init rewritten commits\""},
{"lineNum":"  943","line":"\tfi"},
{"lineNum":"  944","line":"\t# No cherry-pick because our first pass is to determine"},
{"lineNum":"  945","line":"\t# parents to rewrite and skipping dropped commits would"},
{"lineNum":"  946","line":"\t# prematurely end our probe"},
{"lineNum":"  947","line":"\tmerges_option="},
{"lineNum":"  948","line":"else"},
{"lineNum":"  949","line":"\tmerges_option=\"--no-merges --cherry-pick\""},
{"lineNum":"  950","line":"fi"},
{"lineNum":"  951","line":""},
{"lineNum":"  952","line":"shorthead=$(git rev-parse --short $orig_head)"},
{"lineNum":"  953","line":"shortonto=$(git rev-parse --short $onto)"},
{"lineNum":"  954","line":"if test -z \"$rebase_root\""},
{"lineNum":"  955","line":"\t# this is now equivalent to ! -z \"$upstream\""},
{"lineNum":"  956","line":"then"},
{"lineNum":"  957","line":"\tshortupstream=$(git rev-parse --short $upstream)"},
{"lineNum":"  958","line":"\trevisions=$upstream...$orig_head"},
{"lineNum":"  959","line":"\tshortrevisions=$shortupstream..$shorthead"},
{"lineNum":"  960","line":"else"},
{"lineNum":"  961","line":"\trevisions=$onto...$orig_head"},
{"lineNum":"  962","line":"\tshortrevisions=$shorthead"},
{"lineNum":"  963","line":"fi"},
{"lineNum":"  964","line":"git rev-list $merges_option --pretty=oneline --reverse --left-right --topo-order \\"},
{"lineNum":"  965","line":"\t$revisions ${restrict_revision+^$restrict_revision} | \\"},
{"lineNum":"  966","line":"\tsed -n \"s/^>//p\" |"},
{"lineNum":"  967","line":"while read -r sha1 rest"},
{"lineNum":"  968","line":"do"},
{"lineNum":"  969","line":""},
{"lineNum":"  970","line":"\tif test -z \"$keep_empty\" && is_empty_commit $sha1 && ! is_merge_commit $sha1"},
{"lineNum":"  971","line":"\tthen"},
{"lineNum":"  972","line":"\t\tcomment_out=\"$comment_char \""},
{"lineNum":"  973","line":"\telse"},
{"lineNum":"  974","line":"\t\tcomment_out="},
{"lineNum":"  975","line":"\tfi"},
{"lineNum":"  976","line":""},
{"lineNum":"  977","line":"\tif test t != \"$preserve_merges\""},
{"lineNum":"  978","line":"\tthen"},
{"lineNum":"  979","line":"\t\tprintf \'%s\\n\' \"${comment_out}pick $sha1 $rest\" >>\"$todo\""},
{"lineNum":"  980","line":"\telse"},
{"lineNum":"  981","line":"\t\tif test -z \"$rebase_root\""},
{"lineNum":"  982","line":"\t\tthen"},
{"lineNum":"  983","line":"\t\t\tpreserve=t"},
{"lineNum":"  984","line":"\t\t\tfor p in $(git rev-list --parents -1 $sha1 | cut -d\' \' -s -f2-)"},
{"lineNum":"  985","line":"\t\t\tdo"},
{"lineNum":"  986","line":"\t\t\t\tif test -f \"$rewritten\"/$p"},
{"lineNum":"  987","line":"\t\t\t\tthen"},
{"lineNum":"  988","line":"\t\t\t\t\tpreserve=f"},
{"lineNum":"  989","line":"\t\t\t\tfi"},
{"lineNum":"  990","line":"\t\t\tdone"},
{"lineNum":"  991","line":"\t\telse"},
{"lineNum":"  992","line":"\t\t\tpreserve=f"},
{"lineNum":"  993","line":"\t\tfi"},
{"lineNum":"  994","line":"\t\tif test f = \"$preserve\""},
{"lineNum":"  995","line":"\t\tthen"},
{"lineNum":"  996","line":"\t\t\ttouch \"$rewritten\"/$sha1"},
{"lineNum":"  997","line":"\t\t\tprintf \'%s\\n\' \"${comment_out}pick $sha1 $rest\" >>\"$todo\""},
{"lineNum":"  998","line":"\t\tfi"},
{"lineNum":"  999","line":"\tfi"},
{"lineNum":" 1000","line":"done"},
{"lineNum":" 1001","line":""},
{"lineNum":" 1002","line":"# Watch for commits that been dropped by --cherry-pick"},
{"lineNum":" 1003","line":"if test t = \"$preserve_merges\""},
{"lineNum":" 1004","line":"then"},
{"lineNum":" 1005","line":"\tmkdir \"$dropped\""},
{"lineNum":" 1006","line":"\t# Save all non-cherry-picked changes"},
{"lineNum":" 1007","line":"\tgit rev-list $revisions --left-right --cherry-pick | \\"},
{"lineNum":" 1008","line":"\t\tsed -n \"s/^>//p\" > \"$state_dir\"/not-cherry-picks"},
{"lineNum":" 1009","line":"\t# Now all commits and note which ones are missing in"},
{"lineNum":" 1010","line":"\t# not-cherry-picks and hence being dropped"},
{"lineNum":" 1011","line":"\tgit rev-list $revisions |"},
{"lineNum":" 1012","line":"\twhile read rev"},
{"lineNum":" 1013","line":"\tdo"},
{"lineNum":" 1014","line":"\t\tif test -f \"$rewritten\"/$rev && test \"$(sane_grep \"$rev\" \"$state_dir\"/not-cherry-picks)\" = \"\""},
{"lineNum":" 1015","line":"\t\tthen"},
{"lineNum":" 1016","line":"\t\t\t# Use -f2 because if rev-list is telling us this commit is"},
{"lineNum":" 1017","line":"\t\t\t# not worthwhile, we don\'t want to track its multiple heads,"},
{"lineNum":" 1018","line":"\t\t\t# just the history of its first-parent for others that will"},
{"lineNum":" 1019","line":"\t\t\t# be rebasing on top of it"},
{"lineNum":" 1020","line":"\t\t\tgit rev-list --parents -1 $rev | cut -d\' \' -s -f2 > \"$dropped\"/$rev"},
{"lineNum":" 1021","line":"\t\t\tsha1=$(git rev-list -1 $rev)"},
{"lineNum":" 1022","line":"\t\t\tsane_grep -v \"^[a-z][a-z]* $sha1\" <\"$todo\" > \"${todo}2\" ; mv \"${todo}2\" \"$todo\""},
{"lineNum":" 1023","line":"\t\t\trm \"$rewritten\"/$rev"},
{"lineNum":" 1024","line":"\t\tfi"},
{"lineNum":" 1025","line":"\tdone"},
{"lineNum":" 1026","line":"fi"},
{"lineNum":" 1027","line":""},
{"lineNum":" 1028","line":"test -s \"$todo\" || echo noop >> \"$todo\""},
{"lineNum":" 1029","line":"test -n \"$autosquash\" && rearrange_squash \"$todo\""},
{"lineNum":" 1030","line":"test -n \"$cmd\" && add_exec_commands \"$todo\""},
{"lineNum":" 1031","line":""},
{"lineNum":" 1032","line":"todocount=$(git stripspace --strip-comments <\"$todo\" | wc -l)"},
{"lineNum":" 1033","line":"todocount=${todocount##* }"},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"cat >>\"$todo\" <<EOF"},
{"lineNum":" 1036","line":""},
{"lineNum":" 1037","line":"$comment_char Rebase $shortrevisions onto $shortonto ($todocount command(s))"},
{"lineNum":" 1038","line":"EOF"},
{"lineNum":" 1039","line":"append_todo_help"},
{"lineNum":" 1040","line":"git stripspace --comment-lines >>\"$todo\" <<\\EOF"},
{"lineNum":" 1041","line":""},
{"lineNum":" 1042","line":"However, if you remove everything, the rebase will be aborted."},
{"lineNum":" 1043","line":""},
{"lineNum":" 1044","line":"EOF"},
{"lineNum":" 1045","line":""},
{"lineNum":" 1046","line":"if test -z \"$keep_empty\""},
{"lineNum":" 1047","line":"then"},
{"lineNum":" 1048","line":"\tprintf \'%s\\n\' \"$comment_char Note that empty commits are commented out\" >>\"$todo\""},
{"lineNum":" 1049","line":"fi"},
{"lineNum":" 1050","line":""},
{"lineNum":" 1051","line":""},
{"lineNum":" 1052","line":"has_action \"$todo\" ||"},
{"lineNum":" 1053","line":"\treturn 2"},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":"cp \"$todo\" \"$todo\".backup"},
{"lineNum":" 1056","line":"collapse_todo_ids"},
{"lineNum":" 1057","line":"git_sequence_editor \"$todo\" ||"},
{"lineNum":" 1058","line":"\tdie_abort \"Could not execute editor\""},
{"lineNum":" 1059","line":""},
{"lineNum":" 1060","line":"has_action \"$todo\" ||"},
{"lineNum":" 1061","line":"\treturn 2"},
{"lineNum":" 1062","line":""},
{"lineNum":" 1063","line":"expand_todo_ids"},
{"lineNum":" 1064","line":""},
{"lineNum":" 1065","line":"test -d \"$rewritten\" || test -n \"$force_rebase\" || skip_unnecessary_picks"},
{"lineNum":" 1066","line":""},
{"lineNum":" 1067","line":"GIT_REFLOG_ACTION=\"$GIT_REFLOG_ACTION: checkout $onto_name\""},
{"lineNum":" 1068","line":"output git checkout $onto || die_abort \"could not detach HEAD\""},
{"lineNum":" 1069","line":"git update-ref ORIG_HEAD $orig_head"},
{"lineNum":" 1070","line":"do_rest"},
{"lineNum":" 1071","line":""},
{"lineNum":" 1072","line":"}"},
{"lineNum":" 1073","line":"# ... and then we call the whole thing."},
{"lineNum":" 1074","line":"git_rebase__interactive"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "git-pull", "date" : "2015-05-02 15:01:37", "instrumented" : 48, "covered" : 38,};
var merged_data = [];
